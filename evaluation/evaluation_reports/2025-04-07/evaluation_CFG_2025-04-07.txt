

RUNNING 9 FILES



RUNNING 87 UTTERANCES FROM FILE ./data/statements.txt


---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-person != person
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-person != person
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-person != person

Utterance: 	lenka      000: "I am a person"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be', 'object': 'a-person'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be', 'object': 'person'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-person != person
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-person != person
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-person != person

Utterance: 	lenka      000: "I am a person"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be', 'object': 'a-person'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be', 'object': 'person'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple object: {'label': 'serbia', 'type': ['location']} == serbia
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple object: {'label': 'serbia', 'type': ['location']} == serbia

Utterance: 	lenka      000: "I am from serbia"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be-from', 'object': 'serbia'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be-from', 'object': 'serbia'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands

Utterance: 	lenka      000: "I come from the Netherlands"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'come-from', 'object': 'the-Netherlands'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be-from', 'object': 'the-netherlands'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: enjoy-wash != enjoy
Mismatch in triple object: the-dishes != washing-the-dishes
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: enjoy-wash != enjoy
Mismatch in triple object: the-dishes != washing-the-dishes
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: enjoy-wash != enjoy
Mismatch in triple object: the-dishes != washing-the-dishes

Utterance: 	lenka      000: "I don't enjoy washing the dishes"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'enjoy-wash', 'object': 'the-dishes'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'enjoy', 'object': 'washing-the-dishes'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != like
Mismatch in triple object: selene-likes-cheese != cheese
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != like
Mismatch in triple object: selene-likes-cheese != cheese
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != like
Mismatch in triple object: selene-likes-cheese != cheese

Utterance: 	lenka      000: "I don't think selene likes cheese"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think', 'object': 'selene-likes-cheese'}
Expected triple:   	{'subject': 'selene', 'predicate': 'like', 'object': 'cheese'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-like-read != like
Mismatch in triple object: comic-books != reading-comic-books
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-like-read != like
Mismatch in triple object: comic-books != reading-comic-books

Utterance: 	lenka      000: "I have always liked reading comic books"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have-like-read', 'object': 'comic-books'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'like', 'object': 'reading-comic-books'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-hear != hear-about
Mismatch in triple object: you != leolani
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-hear != hear-about
Mismatch in triple object: you != leolani

Utterance: 	lenka      000: "I have heard about you"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have-hear', 'object': 'you'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'hear-about', 'object': 'leolani'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != be-to
Match triple object: {'label': 'Japan', 'type': ['location']} == japan
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != be-to
Match triple object: {'label': 'Japan', 'type': ['location']} == japan

Utterance: 	lenka      000: "I have never been to Japan"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have-be', 'object': 'Japan'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be-to', 'object': 'japan'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'have', 'type': ['possession']} == have
Match triple object: {'label': 'three-white-cats', 'type': ['animal']} == three-white-cats
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'have', 'type': ['possession']} == have
Match triple object: {'label': 'three-white-cats', 'type': ['animal']} == three-white-cats

Utterance: 	lenka      000: "I have three white cats"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'three-white-cats'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'have', 'object': 'three-white-cats'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-to != go-to
Mismatch in triple object: go-home != home

Utterance: 	lenka      000: "I have to go home"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have-to', 'object': 'go-home'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'go-to', 'object': 'home'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: know != come
Mismatch in triple object: selene-might-come-today != today
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: know != come
Mismatch in triple object: selene-might-come-today != today

Utterance: 	lenka      000: "I know selene might come today"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'know', 'object': 'selene-might-come-today'}
Expected triple:   	{'subject': 'selene', 'predicate': 'come', 'object': 'today'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know-that != like
Mismatch in triple object: you-like-me != lenka
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know-that != like
Mismatch in triple object: you-like-me != lenka

Utterance: 	lenka      000: "I know that you like me"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'know-that', 'object': 'you-like-me'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': 'lenka'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple object: {'label': 'leolani', 'type': ['agent']} == leolani

Utterance: 	lenka      000: "I know you"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'know', 'object': 'leolani'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'know', 'object': 'leolani'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: like-to != like
Mismatch in triple object: smell-flowers != to-smell-flowers

Utterance: 	lenka      000: "I like to smell flowers"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'like-to', 'object': 'smell-flowers'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'like', 'object': 'to-smell-flowers'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: like-to != like
Mismatch in triple object: talk != to-talk
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: like-to != like
Mismatch in triple object: talk != to-talk

Utterance: 	lenka      000: "I like to talk"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'like-to', 'object': 'talk'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'like', 'object': 'to-talk'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york

Utterance: 	lenka      000: "I live in New York"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'live-in', 'object': 'New-York'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'live-in', 'object': 'new-york'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands

Utterance: 	lenka      000: "I live in the Netherlands"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'live-in', 'object': 'the-Netherlands'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'live-in', 'object': 'the-netherlands'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'the-Netherlands', 'type': ['location']} == the-netherlands

Utterance: 	lenka      000: "I live in the Netherlands"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'live-in', 'object': 'the-Netherlands'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'live-in', 'object': 'the-netherlands'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'love', 'type': ['emotion']} == love
Match triple object: {'label': 'ice-cream', 'type': ['substance', 'group']} == ice-cream

Utterance: 	lenka      000: "I love ice-cream"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'love', 'object': 'ice-cream'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'love', 'object': 'ice-cream'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: love-look != love
Mismatch in triple object: the-starry-sky != looking-at-the-starry-sky

Utterance: 	lenka      000: "I love looking at the starry sky"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'love-look', 'object': 'the-starry-sky'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'love', 'object': 'looking-at-the-starry-sky'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: must-go != go
Match triple object: {'label': 'home', 'type': ['location']} == home

Utterance: 	lenka      000: "I must go home"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'must-go', 'object': 'home'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'go', 'object': 'home'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: must-go != go-to
Match triple object: {'label': 'Paris', 'type': ['location']} == paris
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: must-go != go-to
Match triple object: {'label': 'Paris', 'type': ['location']} == paris

Utterance: 	lenka      000: "I must go to Paris"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'must-go', 'object': 'Paris'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'go-to', 'object': 'paris'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'own', 'type': ['possession']} == own
Match triple object: {'label': 'three-beautiful-cats', 'type': ['animal']} == three-beautiful-cats
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'own', 'type': ['possession']} == own
Match triple object: {'label': 'three-beautiful-cats', 'type': ['animal']} == three-beautiful-cats

Utterance: 	lenka      000: "I own three beautiful cats"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'own', 'object': 'three-beautiful-cats'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'own', 'object': 'three-beautiful-cats'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != like
Mismatch in triple object: selene-does-not-like-cheese != cheese
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != like
Mismatch in triple object: selene-does-not-like-cheese != cheese

Utterance: 	lenka      000: "I think Selene doesn't like cheese"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think', 'object': 'Selene-does-not-like-cheese'}
Expected triple:   	{'subject': 'selene', 'predicate': 'like', 'object': 'cheese'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != hate
Mismatch in triple object: selene-hates-cheese != cheese
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != hate
Mismatch in triple object: selene-hates-cheese != cheese

Utterance: 	lenka      000: "I think Selene hates cheese"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think', 'object': 'Selene-hates-cheese'}
Expected triple:   	{'subject': 'selene', 'predicate': 'hate', 'object': 'cheese'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: want-to != go
Mismatch in triple object: go-home != home

Utterance: 	lenka      000: "I want to go home"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'want-to', 'object': 'go-home'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'go', 'object': 'home'}

---------------------------------------------------------------


Utterance: 	lenka      000: "I was born in the U.K. "
PARSE ERROR

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: would-like-to != like
Mismatch in triple object: eat-pizza != to-eat-pizza

Utterance: 	lenka      000: "I wouldn't like to eat pizza"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'would-like-to', 'object': 'eat-pizza'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'like', 'object': 'to-eat-pizza'}

---------------------------------------------------------------

Match triple subject: {'label': 'animals', 'type': []} == animals
Mismatch in triple predicate: must-drink != drink
Match triple object: {'label': 'water', 'type': ['substance']} == water

Utterance: 	lenka      000: "animals must drink water"
Predicted Triple:  	{'subject': 'animals', 'predicate': 'must-drink', 'object': 'water'}
Expected triple:   	{'subject': 'animals', 'predicate': 'drink', 'object': 'water'}

---------------------------------------------------------------

Match triple subject: {'label': 'animals', 'type': []} == animals
Mismatch in triple predicate: must-eat != eat
Match triple object: {'label': 'food', 'type': []} == food

Utterance: 	lenka      000: "animals must eat food"
Predicted Triple:  	{'subject': 'animals', 'predicate': 'must-eat', 'object': 'food'}
Expected triple:   	{'subject': 'animals', 'predicate': 'eat', 'object': 'food'}

---------------------------------------------------------------

Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'hate', 'type': ['feeling']} == hate
Match triple object: {'label': 'being-late', 'type': ['stative', 'adv']} == being-late
Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'hate', 'type': ['feeling']} == hate
Match triple object: {'label': 'being-late', 'type': ['stative', 'adv']} == being-late

Utterance: 	lenka      000: "bram hates being late"
Predicted Triple:  	{'subject': 'bram', 'predicate': 'hate', 'object': 'being-late'}
Expected triple:   	{'subject': 'bram', 'predicate': 'hate', 'object': 'being-late'}

---------------------------------------------------------------

Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'like', 'type': []} == like
Match triple object: {'label': 'hockey', 'type': ['act', 'action']} == hockey
Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'like', 'type': []} == like
Match triple object: {'label': 'hockey', 'type': ['act', 'action']} == hockey
Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'like', 'type': []} == like
Match triple object: {'label': 'hockey', 'type': ['act', 'action']} == hockey

Utterance: 	lenka      000: "bram likes hockey"
Predicted Triple:  	{'subject': 'bram', 'predicate': 'like', 'object': 'hockey'}
Expected triple:   	{'subject': 'bram', 'predicate': 'like', 'object': 'hockey'}

---------------------------------------------------------------

Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'love', 'type': ['feeling']} == love
Match triple object: {'label': 'sport', 'type': ['act', 'action']} == sport

Utterance: 	lenka      000: "bram loves sport"
Predicted Triple:  	{'subject': 'bram', 'predicate': 'love', 'object': 'sport'}
Expected triple:   	{'subject': 'bram', 'predicate': 'love', 'object': 'sport'}

---------------------------------------------------------------

Match triple subject: {'label': 'cat', 'type': ['animal']} == cat
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-pet != pet
Match triple subject: {'label': 'cat', 'type': ['animal']} == cat
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-pet != pet
Match triple subject: {'label': 'cat', 'type': ['animal']} == cat
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-pet != pet

Utterance: 	lenka      000: "cat is a pet"
Predicted Triple:  	{'subject': 'cat', 'predicate': 'be', 'object': 'a-pet'}
Expected triple:   	{'subject': 'cat', 'predicate': 'be', 'object': 'pet'}

---------------------------------------------------------------

Match triple subject: {'label': 'food', 'type': []} == food
Mismatch in triple predicate: should-be != be
Match triple object: {'label': 'healthy', 'type': []} == healthy

Utterance: 	lenka      000: "food should be healthy"
Predicted Triple:  	{'subject': 'food', 'predicate': 'should-be', 'object': 'healthy'}
Expected triple:   	{'subject': 'food', 'predicate': 'be', 'object': 'healthy'}

---------------------------------------------------------------

Match triple subject: {'label': 'houses', 'type': ['artifact', 'object']} == houses
Mismatch in triple predicate: should-be != be
Match triple object: {'label': 'warm', 'type': []} == warm

Utterance: 	lenka      000: "houses should be warm"
Predicted Triple:  	{'subject': 'houses', 'predicate': 'should-be', 'object': 'warm'}
Expected triple:   	{'subject': 'houses', 'predicate': 'be', 'object': 'warm'}

---------------------------------------------------------------

Match triple subject: {'label': 'humans', 'type': ['animal']} == humans
Mismatch in triple predicate: can-drink != drink
Match triple object: {'label': 'beer', 'type': ['food']} == beer

Utterance: 	lenka      000: "humans can drink beer"
Predicted Triple:  	{'subject': 'humans', 'predicate': 'can-drink', 'object': 'beer'}
Expected triple:   	{'subject': 'humans', 'predicate': 'drink', 'object': 'beer'}

---------------------------------------------------------------

Match triple subject: {'label': 'humans', 'type': ['animal']} == humans
Mismatch in triple predicate: can-eat != eat
Match triple object: {'label': 'food', 'type': []} == food

Utterance: 	lenka      000: "humans can eat food"
Predicted Triple:  	{'subject': 'humans', 'predicate': 'can-eat', 'object': 'food'}
Expected triple:   	{'subject': 'humans', 'predicate': 'eat', 'object': 'food'}

---------------------------------------------------------------

Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple predicate: enjoy-watch != enjoy
Mismatch in triple object: movies != watching-movies

Utterance: 	lenka      000: "john enjoys watching movies"
Predicted Triple:  	{'subject': 'john', 'predicate': 'enjoy-watch', 'object': 'movies'}
Expected triple:   	{'subject': 'john', 'predicate': 'enjoy', 'object': 'watching-movies'}

---------------------------------------------------------------

Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple predicate: like-to != like
Mismatch in triple object: watch-movies != to-watch-movies

Utterance: 	lenka      000: "john likes to watch movies"
Predicted Triple:  	{'subject': 'john', 'predicate': 'like-to', 'object': 'watch-movies'}
Expected triple:   	{'subject': 'john', 'predicate': 'like', 'object': 'to-watch-movies'}

---------------------------------------------------------------

Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple predicate: will-come != come-to
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple predicate: will-come != come-to
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple predicate: will-come != come-to
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple predicate: will-come != come-to
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam

Utterance: 	lenka      000: "john will come to Amsterdam"
Predicted Triple:  	{'subject': 'john', 'predicate': 'will-come', 'object': 'Amsterdam'}
Expected triple:   	{'subject': 'john', 'predicate': 'come-to', 'object': 'amsterdam'}

---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: can-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: can-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: can-read != read
Mismatch in triple object: a-book != book

Utterance: 	lenka      000: "lana can read a book"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'can-read', 'object': 'a-book'}
Expected triple:   	{'subject': 'lana', 'predicate': 'read', 'object': 'book'}

---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: can-ride != ride
Mismatch in triple object: a-bike != bike
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: can-ride != ride
Mismatch in triple object: a-bike != bike
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: can-ride != ride
Mismatch in triple object: a-bike != bike

Utterance: 	lenka      000: "lana can ride a bike"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'can-ride', 'object': 'a-bike'}
Expected triple:   	{'subject': 'lana', 'predicate': 'ride', 'object': 'bike'}

---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: be-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: be-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: be-read != read
Mismatch in triple object: a-book != book

Utterance: 	lenka      000: "lana is reading a book"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'be-read', 'object': 'a-book'}
Expected triple:   	{'subject': 'lana', 'predicate': 'read', 'object': 'book'}

---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: be-write != write
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: be-write != write
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: be-write != write
Mismatch in triple object: a-book != book

Utterance: 	lenka      000: "lana is writing a book"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'be-write', 'object': 'a-book'}
Expected triple:   	{'subject': 'lana', 'predicate': 'write', 'object': 'book'}

---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: must-eat != eat
Mismatch in triple object:  != something
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: must-eat != eat
Mismatch in triple object:  != something

Utterance: 	lenka      000: "lana must eat"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'must-eat', 'object': ''}
Expected triple:   	{'subject': 'lana', 'predicate': 'eat', 'object': 'something'}

---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: must-read != read
Mismatch in triple object:  != something
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: must-read != read
Mismatch in triple object:  != something

Utterance: 	lenka      000: "lana must read"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'must-read', 'object': ''}
Expected triple:   	{'subject': 'lana', 'predicate': 'read', 'object': 'something'}

---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'read', 'type': ['cognition']} == read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'read', 'type': ['cognition']} == read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'read', 'type': ['cognition']} == read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'read', 'type': ['cognition']} == read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'read', 'type': ['cognition']} == read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'read', 'type': ['cognition']} == read
Mismatch in triple object: a-book != book

Utterance: 	lenka      000: "lana read a book"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'read', 'object': 'a-book'}
Expected triple:   	{'subject': 'lana', 'predicate': 'read', 'object': 'book'}

---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'write', 'type': ['creation']} == write
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'write', 'type': ['creation']} == write
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'write', 'type': ['creation']} == write
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'write', 'type': ['creation']} == write
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'write', 'type': ['creation']} == write
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Match triple predicate: {'label': 'write', 'type': ['creation']} == write
Mismatch in triple object: a-book != book

Utterance: 	lenka      000: "lana write a book"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'write', 'object': 'a-book'}
Expected triple:   	{'subject': 'lana', 'predicate': 'write', 'object': 'book'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: a != leolani
Match triple object: {'label': 'robot', 'type': ['artifact', 'object']} == robot

Utterance: 	lenka      000: "leolani is a robot"
Predicted Triple:  	{'subject': 'a', 'predicate': 'be', 'object': 'robot'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be', 'object': 'robot'}

---------------------------------------------------------------

Mismatch in triple subject: likes != leolani
Mismatch in triple predicate: help != like
Mismatch in triple object: people != helping-people
Mismatch in triple subject: likes != leolani
Mismatch in triple predicate: help != like
Mismatch in triple object: people != helping-people

Utterance: 	lenka      000: "leolani likes helping people"
Predicted Triple:  	{'subject': 'likes', 'predicate': 'help', 'object': 'people'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': 'helping-people'}

---------------------------------------------------------------

Mismatch in triple subject: leolani != lenka
Mismatch in triple predicate: be != best-friend
Mismatch in triple object: my-best-friend != leolani

Utterance: 	lenka      000: "leolani you are my best friend"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'be', 'object': 'my-best-friend'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'best-friend', 'object': 'leolani'}

---------------------------------------------------------------

Mismatch in triple subject: my-best-friend != lenka
Mismatch in triple predicate: be != best-friend
Match triple object: {'label': 'john', 'type': ['artifact', 'object']} == john

Utterance: 	lenka      000: "my best friend is john"
Predicted Triple:  	{'subject': 'my-best-friend', 'predicate': 'be', 'object': 'john'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'best-friend', 'object': 'john'}

---------------------------------------------------------------

Mismatch in triple subject: my-father-favorite-movie != lenka-father
Mismatch in triple predicate: be != favorite-movie
Match triple object: {'label': 'the-Titanic', 'type': ['None']} == the-titanic
Mismatch in triple subject: my-father-favorite-movie != lenka-father
Mismatch in triple predicate: be != favorite-movie
Match triple object: {'label': 'the-Titanic', 'type': ['None']} == the-titanic
Mismatch in triple subject: my-father-favorite-movie != lenka-father
Mismatch in triple predicate: be != favorite-movie
Match triple object: {'label': 'the-Titanic', 'type': ['None']} == the-titanic

Utterance: 	lenka      000: "my father's favorite movie is the Titanic"
Predicted Triple:  	{'subject': 'my-father-favorite-movie', 'predicate': 'be', 'object': 'the-Titanic'}
Expected triple:   	{'subject': 'lenka-father', 'predicate': 'favorite-movie', 'object': 'the-titanic'}

---------------------------------------------------------------

Mismatch in triple subject: my-mother != lenka-mother
Match triple predicate: {'label': 'love', 'type': ['feeling']} == love
Match triple object: {'label': 'the-beatles', 'type': ['group']} == the-beatles
Mismatch in triple subject: my-mother != lenka-mother
Match triple predicate: {'label': 'love', 'type': ['feeling']} == love
Match triple object: {'label': 'the-beatles', 'type': ['group']} == the-beatles
Mismatch in triple subject: my-mother != lenka-mother
Match triple predicate: {'label': 'love', 'type': ['feeling']} == love
Match triple object: {'label': 'the-beatles', 'type': ['group']} == the-beatles

Utterance: 	lenka      000: "my mother loves the beatles"
Predicted Triple:  	{'subject': 'my-mother', 'predicate': 'love', 'object': 'the-beatles'}
Expected triple:   	{'subject': 'lenka-mother', 'predicate': 'love', 'object': 'the-beatles'}

---------------------------------------------------------------

Mismatch in triple subject: my-sister != lenka-sister
Mismatch in triple predicate: like-bake != like
Mismatch in triple object: cakes != baking-cakes

Utterance: 	lenka      000: "my sister doesn't like baking cakes"
Predicted Triple:  	{'subject': 'my-sister', 'predicate': 'like-bake', 'object': 'cakes'}
Expected triple:   	{'subject': 'lenka-sister', 'predicate': 'like', 'object': 'baking-cakes'}

---------------------------------------------------------------

Mismatch in triple subject: my-sister-name != lenka-sister
Mismatch in triple predicate: be != name
Match triple object: {'label': 'Emma', 'type': ['None']} == emma

Utterance: 	lenka      000: "my sister's name is Emma"
Predicted Triple:  	{'subject': 'my-sister-name', 'predicate': 'be', 'object': 'Emma'}
Expected triple:   	{'subject': 'lenka-sister', 'predicate': 'name', 'object': 'emma'}

---------------------------------------------------------------

Match triple subject: {'label': 'reading', 'type': ['cognition']} == reading
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: an-activity != activity
Match triple subject: {'label': 'reading', 'type': ['cognition']} == reading
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: an-activity != activity
Match triple subject: {'label': 'reading', 'type': ['cognition']} == reading
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: an-activity != activity

Utterance: 	lenka      000: "reading is an activity"
Predicted Triple:  	{'subject': 'reading', 'predicate': 'be', 'object': 'an-activity'}
Expected triple:   	{'subject': 'reading', 'predicate': 'be', 'object': 'activity'}

---------------------------------------------------------------

Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple object: {'label': 'mexico', 'type': ['location']} == mexico
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple object: {'label': 'mexico', 'type': ['location']} == mexico

Utterance: 	lenka      000: "selene is from mexico"
Predicted Triple:  	{'subject': 'selene', 'predicate': 'be-from', 'object': 'mexico'}
Expected triple:   	{'subject': 'selene', 'predicate': 'be-from', 'object': 'mexico'}

---------------------------------------------------------------

Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: like-bake != like
Mismatch in triple object: cakes != baking-cakes
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: like-bake != like
Mismatch in triple object: cakes != baking-cakes
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: like-bake != like
Mismatch in triple object: cakes != baking-cakes

Utterance: 	lenka      000: "selene likes baking cakes"
Predicted Triple:  	{'subject': 'selene', 'predicate': 'like-bake', 'object': 'cakes'}
Expected triple:   	{'subject': 'selene', 'predicate': 'like', 'object': 'baking-cakes'}

---------------------------------------------------------------

Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: love-to != love
Mismatch in triple object: bake-cakes != to-bake-cakes

Utterance: 	lenka      000: "selene loves to bake cakes"
Predicted Triple:  	{'subject': 'selene', 'predicate': 'love-to', 'object': 'bake-cakes'}
Expected triple:   	{'subject': 'selene', 'predicate': 'love', 'object': 'to-bake-cakes'}

---------------------------------------------------------------

Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: might-come != come
Match triple object: {'label': 'today', 'type': ['time']} == today
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: might-come != come
Match triple object: {'label': 'today', 'type': ['time']} == today

Utterance: 	lenka      000: "selene might come today"
Predicted Triple:  	{'subject': 'selene', 'predicate': 'might-come', 'object': 'today'}
Expected triple:   	{'subject': 'selene', 'predicate': 'come', 'object': 'today'}

---------------------------------------------------------------

Mismatch in triple subject: this != lenka
Mismatch in triple predicate: be != own
Mismatch in triple object: my-chair != chair

Utterance: 	lenka      000: "sorry this is my chair"
Predicted Triple:  	{'subject': 'this', 'predicate': 'be', 'object': 'my-chair'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'own', 'object': 'chair'}

---------------------------------------------------------------

Match triple subject: {'label': 'suzana', 'type': ['agent']} == suzana
Mismatch in triple predicate: might-have-be != be-at
Match triple object: {'label': 'home', 'type': ['location']} == home
Match triple subject: {'label': 'suzana', 'type': ['agent']} == suzana
Mismatch in triple predicate: might-have-be != be-at
Match triple object: {'label': 'home', 'type': ['location']} == home
Match triple subject: {'label': 'suzana', 'type': ['agent']} == suzana
Mismatch in triple predicate: might-have-be != be-at
Match triple object: {'label': 'home', 'type': ['location']} == home
Match triple subject: {'label': 'suzana', 'type': ['agent']} == suzana
Mismatch in triple predicate: might-have-be != be-at
Match triple object: {'label': 'home', 'type': ['location']} == home

Utterance: 	lenka      000: "suzana might have been at home"
Predicted Triple:  	{'subject': 'suzana', 'predicate': 'might-have-be', 'object': 'home'}
Expected triple:   	{'subject': 'suzana', 'predicate': 'be-at', 'object': 'home'}

---------------------------------------------------------------

Match triple subject: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-sport != sport
Match triple subject: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-sport != sport
Match triple subject: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-sport != sport

Utterance: 	lenka      000: "swimming is a sport"
Predicted Triple:  	{'subject': 'swimming', 'predicate': 'be', 'object': 'a-sport'}
Expected triple:   	{'subject': 'swimming', 'predicate': 'be', 'object': 'sport'}

---------------------------------------------------------------

Mismatch in triple subject: that != shirt
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-lovely-shirt != lovely
Mismatch in triple subject: that != shirt
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-lovely-shirt != lovely
Mismatch in triple subject: that != shirt
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-lovely-shirt != lovely
Mismatch in triple subject: that != shirt
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-lovely-shirt != lovely
Mismatch in triple subject: that != shirt
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-lovely-shirt != lovely

Utterance: 	lenka      000: "that is a lovely shirt"
Predicted Triple:  	{'subject': 'that', 'predicate': 'be', 'object': 'a-lovely-shirt'}
Expected triple:   	{'subject': 'shirt', 'predicate': 'be', 'object': 'lovely'}

---------------------------------------------------------------

Mismatch in triple subject: that != lenka
Mismatch in triple predicate: be != own
Mismatch in triple object: my-cup != cup

Utterance: 	lenka      000: "that is my cup"
Predicted Triple:  	{'subject': 'that', 'predicate': 'be', 'object': 'my-cup'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'own', 'object': 'cup'}

---------------------------------------------------------------

Mismatch in triple subject: these-books != lenka
Mismatch in triple predicate: be != own
Mismatch in triple object: mine != these-books
Mismatch in triple subject: these-books != lenka
Mismatch in triple predicate: be != own
Mismatch in triple object: mine != these-books

Utterance: 	lenka      000: "these books are mine"
Predicted Triple:  	{'subject': 'these-books', 'predicate': 'be', 'object': 'mine'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'own', 'object': 'these-books'}

---------------------------------------------------------------

Match triple subject: {'label': 'they', 'type': []} == they
Mismatch in triple predicate: be-go != go-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'they', 'type': []} == they
Mismatch in triple predicate: be-go != go-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'they', 'type': []} == they
Mismatch in triple predicate: be-go != go-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'they', 'type': []} == they
Mismatch in triple predicate: be-go != go-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'they', 'type': []} == they
Mismatch in triple predicate: be-go != go-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'they', 'type': []} == they
Mismatch in triple predicate: be-go != go-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university

Utterance: 	lenka      000: "they are not going to the university"
Predicted Triple:  	{'subject': 'they', 'predicate': 'be-go', 'object': 'the-university'}
Expected triple:   	{'subject': 'they', 'predicate': 'go-to', 'object': 'the-university'}

---------------------------------------------------------------

Match triple subject: {'label': 'this', 'type': []} == this
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-pink-chair != pink-chair
Match triple subject: {'label': 'this', 'type': []} == this
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-pink-chair != pink-chair
Match triple subject: {'label': 'this', 'type': []} == this
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-pink-chair != pink-chair
Match triple subject: {'label': 'this', 'type': []} == this
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-pink-chair != pink-chair
Match triple subject: {'label': 'this', 'type': []} == this
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-pink-chair != pink-chair

Utterance: 	lenka      000: "this is a pink chair"
Predicted Triple:  	{'subject': 'this', 'predicate': 'be', 'object': 'a-pink-chair'}
Expected triple:   	{'subject': 'this', 'predicate': 'be', 'object': 'pink-chair'}

---------------------------------------------------------------

Match triple subject: {'label': 'this', 'type': []} == this
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-teddy-bear != teddy-bear
Match triple subject: {'label': 'this', 'type': []} == this
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-teddy-bear != teddy-bear
Match triple subject: {'label': 'this', 'type': []} == this
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-teddy-bear != teddy-bear

Utterance: 	lenka      000: "this is a teddy-bear"
Predicted Triple:  	{'subject': 'this', 'predicate': 'be', 'object': 'a-teddy-bear'}
Expected triple:   	{'subject': 'this', 'predicate': 'be', 'object': 'teddy-bear'}

---------------------------------------------------------------

Mismatch in triple subject: this != lenka
Mismatch in triple predicate: be != favorite-song
Mismatch in triple object: my-favorite-song != this
Mismatch in triple subject: this != lenka
Mismatch in triple predicate: be != favorite-song
Mismatch in triple object: my-favorite-song != this

Utterance: 	lenka      000: "this is my favorite song"
Predicted Triple:  	{'subject': 'this', 'predicate': 'be', 'object': 'my-favorite-song'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'favorite-song', 'object': 'this'}

---------------------------------------------------------------

Match triple subject: {'label': 'this-yellow-fruit', 'type': ['plant']} == this-yellow-fruit
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-banana != banana
Match triple subject: {'label': 'this-yellow-fruit', 'type': ['plant']} == this-yellow-fruit
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-banana != banana
Match triple subject: {'label': 'this-yellow-fruit', 'type': ['plant']} == this-yellow-fruit
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-banana != banana
Match triple subject: {'label': 'this-yellow-fruit', 'type': ['plant']} == this-yellow-fruit
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-banana != banana
Match triple subject: {'label': 'this-yellow-fruit', 'type': ['plant']} == this-yellow-fruit
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-banana != banana
Match triple subject: {'label': 'this-yellow-fruit', 'type': ['plant']} == this-yellow-fruit
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-banana != banana

Utterance: 	lenka      000: "this yellow fruit is a banana"
Predicted Triple:  	{'subject': 'this-yellow-fruit', 'predicate': 'be', 'object': 'a-banana'}
Expected triple:   	{'subject': 'this-yellow-fruit', 'predicate': 'be', 'object': 'banana'}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-robot != robot
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-robot != robot
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-robot != robot

Utterance: 	lenka      000: "you are a robot"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'be', 'object': 'a-robot'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be', 'object': 'robot'}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: be-go-to != go-to
Match triple object: {'label': 'england', 'type': ['verb', 'action']} == england
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: be-go-to != go-to
Match triple object: {'label': 'england', 'type': ['verb', 'action']} == england
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: be-go-to != go-to
Match triple object: {'label': 'england', 'type': ['verb', 'action']} == england

Utterance: 	lenka      000: "you are going to england"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'be-go-to', 'object': 'england'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go-to', 'object': 'england'}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'france', 'type': ['location']} == france
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'france', 'type': ['location']} == france
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'france', 'type': ['location']} == france
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: come-from != be-from
Match triple object: {'label': 'france', 'type': ['location']} == france

Utterance: 	lenka      000: "you come from france"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'come-from', 'object': 'france'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be-from', 'object': 'france'}

---------------------------------------------------------------


Utterance: 	lenka      000: "you have been in paris"
PARSE ERROR

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: like-talk != like
Mismatch in triple object: people != talking-to-people
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: like-talk != like
Mismatch in triple object: people != talking-to-people

Utterance: 	lenka      000: "you like talking to people"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'like-talk', 'object': 'people'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': 'talking-to-people'}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'amsterdam', 'type': ['location']} == amsterdam
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'amsterdam', 'type': ['location']} == amsterdam

Utterance: 	lenka      000: "you live in amsterdam"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'live-in', 'object': 'amsterdam'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'live-in', 'object': 'amsterdam'}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'this-office', 'type': ['artifact', 'object']} == this-office
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'this-office', 'type': ['artifact', 'object']} == this-office
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'this-office', 'type': ['artifact', 'object']} == this-office
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'this-office', 'type': ['artifact', 'object']} == this-office
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'this-office', 'type': ['artifact', 'object']} == this-office
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple object: {'label': 'this-office', 'type': ['artifact', 'object']} == this-office

Utterance: 	lenka      000: "you live in this office"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'live-in', 'object': 'this-office'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'live-in', 'object': 'this-office'}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: may-come != be-from
Match triple object: {'label': 'france', 'type': ['location']} == france
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: may-come != be-from
Match triple object: {'label': 'france', 'type': ['location']} == france
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: may-come != be-from
Match triple object: {'label': 'france', 'type': ['location']} == france
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: may-come != be-from
Match triple object: {'label': 'france', 'type': ['location']} == france

Utterance: 	lenka      000: "you may come from france"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'may-come', 'object': 'france'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be-from', 'object': 'france'}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: should-go != go
Mismatch in triple object:  != somewhere
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: should-go != go
Mismatch in triple object:  != somewhere

Utterance: 	lenka      000: "you should go"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'should-go', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go', 'object': 'somewhere'}

---------------------------------------------------------------

Mismatch in triple subject: leolani != lenka
Mismatch in triple predicate: think != name
Mismatch in triple object: my-name-is-anna != anna
Mismatch in triple subject: leolani != lenka
Mismatch in triple predicate: think != name
Mismatch in triple object: my-name-is-anna != anna

Utterance: 	lenka      000: "you think my name is anna"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'think', 'object': 'my-name-is-anna'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'name', 'object': 'anna'}

---------------------------------------------------------------


Utterance: 	lenka      000: "you were in paris"
PARSE ERROR

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: will-go-to != go-to
Match triple object: {'label': 'england', 'type': ['verb', 'action']} == england
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: will-go-to != go-to
Match triple object: {'label': 'england', 'type': ['verb', 'action']} == england
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: will-go-to != go-to
Match triple object: {'label': 'england', 'type': ['verb', 'action']} == england

Utterance: 	lenka      000: "you will go to england"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'will-go-to', 'object': 'england'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go-to', 'object': 'england'}

---------------------------------------------------------------

Mismatch in triple subject: your-sister != leolani-sister
Mismatch in triple predicate: must-come != come-to
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: your-sister != leolani-sister
Mismatch in triple predicate: must-come != come-to
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: your-sister != leolani-sister
Mismatch in triple predicate: must-come != come-to
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: your-sister != leolani-sister
Mismatch in triple predicate: must-come != come-to
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam

Utterance: 	lenka      000: "your sister must come to Amsterdam"
Predicted Triple:  	{'subject': 'your-sister', 'predicate': 'must-come', 'object': 'Amsterdam'}
Expected triple:   	{'subject': 'leolani-sister', 'predicate': 'come-to', 'object': 'amsterdam'}



---------------------------------------------------------------
SUMMARY


RAN 87 UTTERANCES FROM FILE ./data/statements.txt


UTTERANCE WITHOUT TRIPLES: 3

CORRECT TRIPLES: 14			INCORRECT TRIPLES: 73			RECALL: 16.09%

CORRECT SUBJECTS: 64			INCORRECT SUBJECTS: 23			RECALL: 73.56%

CORRECT PREDICATES: 28			INCORRECT PREDICATES: 59			RECALL: 32.18%

CORRECT OBJECTS: 38			INCORRECT OBJECTS: 49			RECALL: 43.68%

CORRECT PERSPECTIVES: 0			INCORRECT PERSPECTIVES: 0			RECALL: 0.00%

ISSUES (72 UTTERANCES): {
    "I am a person": {
        "triple": "I am a person: lenka be person"
    }, 
    "I come from the Netherlands": {
        "triple": "I come from the Netherlands: lenka be-from the-netherlands"
    }, 
    "I don't enjoy washing the dishes": {
        "triple": "I don't enjoy washing the dishes: lenka enjoy washing-the-dishes"
    }, 
    "I don't think selene likes cheese": {
        "triple": "I don't think selene likes cheese: selene like cheese"
    }, 
    "I have always liked reading comic books": {
        "triple": "I have always liked reading comic books: lenka like reading-comic-books"
    }, 
    "I have heard about you": {
        "triple": "I have heard about you: lenka hear-about leolani"
    }, 
    "I have never been to Japan": {
        "triple": "I have never been to Japan: lenka be-to japan"
    }, 
    "I have to go home": {
        "triple": "I have to go home: lenka go-to home"
    }, 
    "I know selene might come today": {
        "triple": "I know selene might come today: selene come today"
    }, 
    "I know that you like me": {
        "triple": "I know that you like me: leolani like lenka"
    }, 
    "I like to smell flowers": {
        "triple": "I like to smell flowers: lenka like to-smell-flowers"
    }, 
    "I like to talk": {
        "triple": "I like to talk: lenka like to-talk"
    }, 
    "I love looking at the starry sky": {
        "triple": "I love looking at the starry sky: lenka love looking-at-the-starry-sky"
    }, 
    "I must go home": {
        "triple": "I must go home: lenka go home"
    }, 
    "I must go to Paris": {
        "triple": "I must go to Paris: lenka go-to paris"
    }, 
    "I think Selene doesn't like cheese": {
        "triple": "I think Selene doesn't like cheese: selene like cheese"
    }, 
    "I think Selene hates cheese": {
        "triple": "I think Selene hates cheese: selene hate cheese"
    }, 
    "I want to go home": {
        "triple": "I want to go home: lenka go home"
    }, 
    "I was born in the U.K. ": {
        "parsing": "NOT PARSED", 
        "triple": "I was born in the U.K. : lenka born-in the-u.k."
    }, 
    "I wouldn't like to eat pizza": {
        "triple": "I wouldn't like to eat pizza: lenka like to-eat-pizza"
    }, 
    "animals must drink water": {
        "triple": "animals must drink water: animals drink water"
    }, 
    "animals must eat food": {
        "triple": "animals must eat food: animals eat food"
    }, 
    "cat is a pet": {
        "triple": "cat is a pet: cat be pet"
    }, 
    "food should be healthy": {
        "triple": "food should be healthy: food be healthy"
    }, 
    "houses should be warm": {
        "triple": "houses should be warm: houses be warm"
    }, 
    "humans can drink beer": {
        "triple": "humans can drink beer: humans drink beer"
    }, 
    "humans can eat food": {
        "triple": "humans can eat food: humans eat food"
    }, 
    "john enjoys watching movies": {
        "triple": "john enjoys watching movies: john enjoy watching-movies"
    }, 
    "john likes to watch movies": {
        "triple": "john likes to watch movies: john like to-watch-movies"
    }, 
    "john will come to Amsterdam": {
        "triple": "john will come to Amsterdam: john come-to amsterdam"
    }, 
    "lana can read a book": {
        "triple": "lana can read a book: lana read book"
    }, 
    "lana can ride a bike": {
        "triple": "lana can ride a bike: lana ride bike"
    }, 
    "lana is reading a book": {
        "triple": "lana is reading a book: lana read book"
    }, 
    "lana is writing a book": {
        "triple": "lana is writing a book: lana write book"
    }, 
    "lana must eat": {
        "triple": "lana must eat: lana eat something"
    }, 
    "lana must read": {
        "triple": "lana must read: lana read something"
    }, 
    "lana read a book": {
        "triple": "lana read a book: lana read book"
    }, 
    "lana write a book": {
        "triple": "lana write a book: lana write book"
    }, 
    "leolani is a robot": {
        "triple": "leolani is a robot: leolani be robot"
    }, 
    "leolani likes helping people": {
        "triple": "leolani likes helping people: leolani like helping-people"
    }, 
    "leolani you are my best friend": {
        "triple": "leolani you are my best friend: lenka best-friend leolani"
    }, 
    "my best friend is john": {
        "triple": "my best friend is john: lenka best-friend john"
    }, 
    "my father's favorite movie is the Titanic": {
        "triple": "my father's favorite movie is the Titanic: lenka-father favorite-movie the-titanic"
    }, 
    "my mother loves the beatles": {
        "triple": "my mother loves the beatles: lenka-mother love the-beatles"
    }, 
    "my sister doesn't like baking cakes": {
        "triple": "my sister doesn't like baking cakes: lenka-sister like baking-cakes"
    }, 
    "my sister's name is Emma": {
        "triple": "my sister's name is Emma: lenka-sister name emma"
    }, 
    "reading is an activity": {
        "triple": "reading is an activity: reading be activity"
    }, 
    "selene likes baking cakes": {
        "triple": "selene likes baking cakes: selene like baking-cakes"
    }, 
    "selene loves to bake cakes": {
        "triple": "selene loves to bake cakes: selene love to-bake-cakes"
    }, 
    "selene might come today": {
        "triple": "selene might come today: selene come today"
    }, 
    "sorry this is my chair": {
        "triple": "sorry this is my chair: lenka own chair"
    }, 
    "suzana might have been at home": {
        "triple": "suzana might have been at home: suzana be-at home"
    }, 
    "swimming is a sport": {
        "triple": "swimming is a sport: swimming be sport"
    }, 
    "that is a lovely shirt": {
        "triple": "that is a lovely shirt: shirt be lovely"
    }, 
    "that is my cup": {
        "triple": "that is my cup: lenka own cup"
    }, 
    "these books are mine": {
        "triple": "these books are mine: lenka own these-books"
    }, 
    "they are not going to the university": {
        "triple": "they are not going to the university: they go-to the-university"
    }, 
    "this is a pink chair": {
        "triple": "this is a pink chair: this be pink-chair"
    }, 
    "this is a teddy-bear": {
        "triple": "this is a teddy-bear: this be teddy-bear"
    }, 
    "this is my favorite song": {
        "triple": "this is my favorite song: lenka favorite-song this"
    }, 
    "this yellow fruit is a banana": {
        "triple": "this yellow fruit is a banana: this-yellow-fruit be banana"
    }, 
    "you are a robot": {
        "triple": "you are a robot: leolani be robot"
    }, 
    "you are going to england": {
        "triple": "you are going to england: leolani go-to england"
    }, 
    "you come from france": {
        "triple": "you come from france: leolani be-from france"
    }, 
    "you have been in paris": {
        "parsing": "NOT PARSED", 
        "triple": "you have been in paris: leolani be-in paris"
    }, 
    "you like talking to people": {
        "triple": "you like talking to people: leolani like talking-to-people"
    }, 
    "you may come from france": {
        "triple": "you may come from france: leolani be-from france"
    }, 
    "you should go": {
        "triple": "you should go: leolani go somewhere"
    }, 
    "you think my name is anna": {
        "triple": "you think my name is anna: lenka name anna"
    }, 
    "you were in paris": {
        "parsing": "NOT PARSED", 
        "triple": "you were in paris: leolani be-in paris"
    }, 
    "you will go to england": {
        "triple": "you will go to england: leolani go-to england"
    }, 
    "your sister must come to Amsterdam": {
        "triple": "your sister must come to Amsterdam: leolani-sister come-to amsterdam"
    }
}

RUNNING 48 UTTERANCES FROM FILE ./data/verb-questions.txt


---------------------------------------------------------------

Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: lenka != leolani-best-friend
Mismatch in triple object: your-best-friend != lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: lenka != leolani-best-friend
Mismatch in triple object: your-best-friend != lenka

Utterance: 	lenka      000: "am I your best friend"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be', 'object': 'your-best-friend'}
Expected triple:   	{'subject': 'leolani-best-friend', 'predicate': 'be', 'object': 'lenka'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-girl != girl
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-girl != girl
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-girl != girl
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-girl != girl

Utterance: 	lenka      000: "are you a girl"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'be', 'object': 'a-girl'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be', 'object': 'girl'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'afraid-of-dogs', 'type': ['animal']} == afraid-of-dogs
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'afraid-of-dogs', 'type': ['animal']} == afraid-of-dogs
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'afraid-of-dogs', 'type': ['animal']} == afraid-of-dogs
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'afraid-of-dogs', 'type': ['animal']} == afraid-of-dogs

Utterance: 	lenka      000: "are you afraid of dogs"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'be', 'object': 'afraid-of-dogs'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be', 'object': 'afraid-of-dogs'}

---------------------------------------------------------------

Mismatch in triple predicate: be != be-from
Mismatch in triple subject: your-from-the != leolani
Mismatch in triple object: netherlands != the-netherlands

Utterance: 	lenka      000: "are your from the netherlands"
Predicted Triple:  	{'subject': 'your-from-the', 'predicate': 'be', 'object': 'netherlands'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be-from', 'object': 'the-netherlands'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands

Utterance: 	lenka      000: "am I from the netherlands"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be-from', 'object': 'the-netherlands'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be-from', 'object': 'the-netherlands'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Mismatch in triple subject: your-parents != leolani-parents
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Mismatch in triple subject: your-parents != leolani-parents
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Mismatch in triple subject: your-parents != leolani-parents
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Mismatch in triple subject: your-parents != leolani-parents
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Mismatch in triple subject: your-parents != leolani-parents
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands
Match triple predicate: {'label': 'be-from', 'type': ['stative']} == be-from
Mismatch in triple subject: your-parents != leolani-parents
Match triple object: {'label': 'the-netherlands', 'type': ['location']} == the-netherlands

Utterance: 	lenka      000: "are your parents from the netherlands"
Predicted Triple:  	{'subject': 'your-parents', 'predicate': 'be-from', 'object': 'the-netherlands'}
Expected triple:   	{'subject': 'leolani-parents', 'predicate': 'be-from', 'object': 'the-netherlands'}

---------------------------------------------------------------

Mismatch in triple predicate: can-call != call
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': 'leolani', 'type': ['agent']} == leolani

Utterance: 	lenka      000: "can I call you"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'can-call', 'object': 'leolani'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'call', 'object': 'leolani'}

---------------------------------------------------------------

Mismatch in triple predicate: can-make != make
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple object: a-cake != cake
Mismatch in triple predicate: can-make != make
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple object: a-cake != cake

Utterance: 	lenka      000: "can I make a cake"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'can-make', 'object': 'a-cake'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'make', 'object': 'cake'}

---------------------------------------------------------------

Mismatch in triple predicate: can-sing != sing
Match triple subject: {'label': 'a-bird', 'type': ['animal']} == a-bird
Mismatch in triple object: a-song != song
Mismatch in triple predicate: can-sing != sing
Match triple subject: {'label': 'a-bird', 'type': ['animal']} == a-bird
Mismatch in triple object: a-song != song
Mismatch in triple predicate: can-sing != sing
Match triple subject: {'label': 'a-bird', 'type': ['animal']} == a-bird
Mismatch in triple object: a-song != song
Mismatch in triple predicate: can-sing != sing
Match triple subject: {'label': 'a-bird', 'type': ['animal']} == a-bird
Mismatch in triple object: a-song != song

Utterance: 	lenka      000: "can a bird sing a song"
Predicted Triple:  	{'subject': 'a-bird', 'predicate': 'can-sing', 'object': 'a-song'}
Expected triple:   	{'subject': 'a-bird', 'predicate': 'sing', 'object': 'song'}

---------------------------------------------------------------

Mismatch in triple predicate: can != talk-to
Mismatch in triple subject: my-friend != lenka-friend
Mismatch in triple object: talk-to-you != leolani
Mismatch in triple predicate: can != talk-to
Mismatch in triple subject: my-friend != lenka-friend
Mismatch in triple object: talk-to-you != leolani
Mismatch in triple predicate: can != talk-to
Mismatch in triple subject: my-friend != lenka-friend
Mismatch in triple object: talk-to-you != leolani
Mismatch in triple predicate: can != talk-to
Mismatch in triple subject: my-friend != lenka-friend
Mismatch in triple object: talk-to-you != leolani
Mismatch in triple predicate: can != talk-to
Mismatch in triple subject: my-friend != lenka-friend
Mismatch in triple object: talk-to-you != leolani
Mismatch in triple predicate: can != talk-to
Mismatch in triple subject: my-friend != lenka-friend
Mismatch in triple object: talk-to-you != leolani

Utterance: 	lenka      000: "can my friend talk to you"
Predicted Triple:  	{'subject': 'my-friend', 'predicate': 'can', 'object': 'talk-to-you'}
Expected triple:   	{'subject': 'lenka-friend', 'predicate': 'talk-to', 'object': 'leolani'}

---------------------------------------------------------------

Mismatch in triple predicate: can-recommend != recommend
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-book-about-history != book-about-history
Mismatch in triple predicate: can-recommend != recommend
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-book-about-history != book-about-history

Utterance: 	lenka      000: "can you recommend a book about history"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'can-recommend', 'object': 'a-book-about-history'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'recommend', 'object': 'book-about-history'}

---------------------------------------------------------------

Mismatch in triple predicate: can-sing != sing
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "can you sing"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'can-sing', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'sing', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: can != talk-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-to-me != lenka
Mismatch in triple predicate: can != talk-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-to-me != lenka
Mismatch in triple predicate: can != talk-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-to-me != lenka
Mismatch in triple predicate: can != talk-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-to-me != lenka
Mismatch in triple predicate: can != talk-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-to-me != lenka
Mismatch in triple predicate: can != talk-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-to-me != lenka

Utterance: 	lenka      000: "can you talk to me"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'can', 'object': 'talk-to-me'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'talk-to', 'object': 'lenka'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'a-dog', 'type': ['animal']} == a-dog
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'a-dog', 'type': ['animal']} == a-dog
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple subject: {'label': 'a-dog', 'type': ['animal']} == a-dog
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "can you tell me what is a dog"
Predicted Triple:  	{'subject': 'a-dog', 'predicate': 'be', 'object': ''}
Expected triple:   	{'subject': 'a-dog', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: can-come != come-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'university', 'type': ['group']} == university
Mismatch in triple predicate: can-come != come-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'university', 'type': ['group']} == university
Mismatch in triple predicate: can-come != come-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'university', 'type': ['group']} == university
Mismatch in triple predicate: can-come != come-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'university', 'type': ['group']} == university

Utterance: 	lenka      000: "can't you come to university"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'can-come', 'object': 'university'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'come-to', 'object': 'university'}

---------------------------------------------------------------

Mismatch in triple predicate: could-hear != hear
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'lenka', 'type': []} == lenka

Utterance: 	lenka      000: "could you hear me"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'could-hear', 'object': 'lenka'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'hear', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple predicate: do-read != read
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple object: a-book != book
Mismatch in triple predicate: do-read != read
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple object: a-book != book
Mismatch in triple predicate: do-read != read
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple object: a-book != book
Mismatch in triple predicate: do-read != read
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple object: a-book != book
Mismatch in triple predicate: do-read != read
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple object: a-book != book
Mismatch in triple predicate: do-read != read
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple object: a-book != book
Mismatch in triple predicate: do-read != read
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple object: a-book != book
Mismatch in triple predicate: do-read != read
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple object: a-book != book

Utterance: 	lenka      000: "did lana read a book"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'do-read', 'object': 'a-book'}
Expected triple:   	{'subject': 'lana', 'predicate': 'read', 'object': 'book'}

---------------------------------------------------------------

Mismatch in triple predicate: do-go != go-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Paris', 'type': ['location']} == paris
Mismatch in triple predicate: do-go != go-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Paris', 'type': ['location']} == paris

Utterance: 	lenka      000: "did you ever go to Paris"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do-go', 'object': 'Paris'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go-to', 'object': 'paris'}

---------------------------------------------------------------

Mismatch in triple predicate: do-go != go-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'school-yesterday', 'type': ['group', 'time']} == school-yesterday
Mismatch in triple predicate: do-go != go-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'school-yesterday', 'type': ['group', 'time']} == school-yesterday

Utterance: 	lenka      000: "did you go to school yesterday"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do-go', 'object': 'school-yesterday'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go-to', 'object': 'school-yesterday'}

---------------------------------------------------------------

Mismatch in triple predicate: do-meet != meet
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-pretty-girl != pretty-girl
Mismatch in triple predicate: do-meet != meet
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-pretty-girl != pretty-girl

Utterance: 	lenka      000: "did you meet a pretty girl"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do-meet', 'object': 'a-pretty-girl'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'meet', 'object': 'pretty-girl'}

---------------------------------------------------------------

Mismatch in triple predicate: do-meet != meet
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'john', 'type': ['artifact', 'object']} == john

Utterance: 	lenka      000: "did you meet john"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do-meet', 'object': 'john'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'meet', 'object': 'john'}

---------------------------------------------------------------

Mismatch in triple predicate: do-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog
Mismatch in triple predicate: do-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog

Utterance: 	lenka      000: "did you see a dog"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do-see', 'object': 'a-dog'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'see', 'object': 'dog'}

---------------------------------------------------------------

Mismatch in triple predicate: do-sing != sing
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-song-about-rain != song-about-rain
Mismatch in triple predicate: do-sing != sing
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-song-about-rain != song-about-rain

Utterance: 	lenka      000: "did you sing a song about rain"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do-sing', 'object': 'a-song-about-rain'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'sing', 'object': 'song-about-rain'}

---------------------------------------------------------------

Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene
Mismatch in triple predicate: do != talk-with
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: talk-with-selene != selene

Utterance: 	lenka      000: "did you talk with Selene"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do', 'object': 'talk-with-Selene'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'talk-with', 'object': 'selene'}

---------------------------------------------------------------

Mismatch in triple predicate: do-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Selene', 'type': ['person']} == selene
Mismatch in triple predicate: do-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Selene', 'type': ['person']} == selene
Mismatch in triple predicate: do-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Selene', 'type': ['person']} == selene
Mismatch in triple predicate: do-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Selene', 'type': ['person']} == selene

Utterance: 	lenka      000: "didn't you see Selene"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do-see', 'object': 'Selene'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'see', 'object': 'selene'}

---------------------------------------------------------------

Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dangerous-animal != dangerous-animal
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dangerous-animal != dangerous-animal
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dangerous-animal != dangerous-animal
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dangerous-animal != dangerous-animal
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dangerous-animal != dangerous-animal
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dangerous-animal != dangerous-animal
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dangerous-animal != dangerous-animal
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dangerous-animal != dangerous-animal

Utterance: 	lenka      000: "do you know a dangerous animal"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'know', 'object': 'a-dangerous-animal'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'know', 'object': 'dangerous-animal'}

---------------------------------------------------------------

Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'lenka', 'type': []} == lenka
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'lenka', 'type': []} == lenka
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'lenka', 'type': []} == lenka
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'lenka', 'type': []} == lenka

Utterance: 	lenka      000: "do you know me"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'know', 'object': 'lenka'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'know', 'object': 'lenka'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: a-dog != dog
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: a-dog != dog
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "do you know what a dog is"
Predicted Triple:  	{'subject': 'a-dog', 'predicate': 'be', 'object': ''}
Expected triple:   	{'subject': 'dog', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'amsterdam', 'type': ['location']} == amsterdam
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'amsterdam', 'type': ['location']} == amsterdam

Utterance: 	lenka      000: "do you like amsterdam"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'like', 'object': 'amsterdam'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': 'amsterdam'}

---------------------------------------------------------------

Mismatch in triple predicate: like-live != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: amsterdam != living-in-amsterdam
Mismatch in triple predicate: like-live != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: amsterdam != living-in-amsterdam
Mismatch in triple predicate: like-live != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: amsterdam != living-in-amsterdam
Mismatch in triple predicate: like-live != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: amsterdam != living-in-amsterdam

Utterance: 	lenka      000: "do you like living in amsterdam"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'like-live', 'object': 'amsterdam'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': 'living-in-amsterdam'}

---------------------------------------------------------------

Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'new-york', 'type': ['group']} == new-york
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'new-york', 'type': ['group']} == new-york

Utterance: 	lenka      000: "do you like new york"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'like', 'object': 'new-york'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': 'new-york'}

---------------------------------------------------------------

Mismatch in triple predicate: like-to != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: live-in-new-york != to-live-in-new-york
Mismatch in triple predicate: like-to != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: live-in-new-york != to-live-in-new-york
Mismatch in triple predicate: like-to != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: live-in-new-york != to-live-in-new-york
Mismatch in triple predicate: like-to != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: live-in-new-york != to-live-in-new-york
Mismatch in triple predicate: like-to != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: live-in-new-york != to-live-in-new-york
Mismatch in triple predicate: like-to != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: live-in-new-york != to-live-in-new-york
Mismatch in triple predicate: like-to != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: live-in-new-york != to-live-in-new-york
Mismatch in triple predicate: like-to != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: live-in-new-york != to-live-in-new-york

Utterance: 	lenka      000: "do you like to live in new york"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'like-to', 'object': 'live-in-new-york'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': 'to-live-in-new-york'}

---------------------------------------------------------------

Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: people != talking-to-people
Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: people != talking-to-people
Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: people != talking-to-people
Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: people != talking-to-people

Utterance: 	lenka      000: "do you like talking to people"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'like-talk', 'object': 'people'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': 'talking-to-people'}

---------------------------------------------------------------

Match triple predicate: {'label': 'see', 'type': ['perception']} == see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog
Match triple predicate: {'label': 'see', 'type': ['perception']} == see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog
Match triple predicate: {'label': 'see', 'type': ['perception']} == see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog
Match triple predicate: {'label': 'see', 'type': ['perception']} == see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog
Match triple predicate: {'label': 'see', 'type': ['perception']} == see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog
Match triple predicate: {'label': 'see', 'type': ['perception']} == see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog
Match triple predicate: {'label': 'see', 'type': ['perception']} == see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog
Match triple predicate: {'label': 'see', 'type': ['perception']} == see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: a-dog != dog

Utterance: 	lenka      000: "do you see a dog"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'see', 'object': 'a-dog'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'see', 'object': 'dog'}

---------------------------------------------------------------

Mismatch in triple predicate: enjoy-watch != enjoy
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple object: movies != watching-movies

Utterance: 	lenka      000: "does john enjoy watching movies"
Predicted Triple:  	{'subject': 'john', 'predicate': 'enjoy-watch', 'object': 'movies'}
Expected triple:   	{'subject': 'john', 'predicate': 'enjoy', 'object': 'watching-movies'}

---------------------------------------------------------------

Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple object: {'label': 'the-building', 'type': ['artifact', 'object']} == the-building
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple object: {'label': 'the-building', 'type': ['artifact', 'object']} == the-building
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple object: {'label': 'the-building', 'type': ['artifact', 'object']} == the-building
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple object: {'label': 'the-building', 'type': ['artifact', 'object']} == the-building
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple object: {'label': 'the-building', 'type': ['artifact', 'object']} == the-building
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple object: {'label': 'the-building', 'type': ['artifact', 'object']} == the-building
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple object: {'label': 'the-building', 'type': ['artifact', 'object']} == the-building
Match triple predicate: {'label': 'live-in', 'type': ['stative']} == live-in
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple object: {'label': 'the-building', 'type': ['artifact', 'object']} == the-building

Utterance: 	lenka      000: "does john live in the building"
Predicted Triple:  	{'subject': 'john', 'predicate': 'live-in', 'object': 'the-building'}
Expected triple:   	{'subject': 'john', 'predicate': 'live-in', 'object': 'the-building'}

---------------------------------------------------------------

Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Match triple object: {'label': 'suzana', 'type': ['agent']} == suzana
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Match triple object: {'label': 'suzana', 'type': ['agent']} == suzana

Utterance: 	lenka      000: "does selene know suzana"
Predicted Triple:  	{'subject': 'selene', 'predicate': 'know', 'object': 'suzana'}
Expected triple:   	{'subject': 'selene', 'predicate': 'know', 'object': 'suzana'}

---------------------------------------------------------------

Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Mismatch in triple subject: your-sister != leolani-sister
Match triple object: {'label': 'lenka', 'type': []} == lenka
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Mismatch in triple subject: your-sister != leolani-sister
Match triple object: {'label': 'lenka', 'type': []} == lenka

Utterance: 	lenka      000: "does your sister know me"
Predicted Triple:  	{'subject': 'your-sister', 'predicate': 'know', 'object': 'lenka'}
Expected triple:   	{'subject': 'leolani-sister', 'predicate': 'know', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple predicate: have-be != be-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Paris', 'type': ['location']} == paris
Mismatch in triple predicate: have-be != be-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Paris', 'type': ['location']} == paris
Mismatch in triple predicate: have-be != be-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Paris', 'type': ['location']} == paris
Mismatch in triple predicate: have-be != be-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Paris', 'type': ['location']} == paris

Utterance: 	lenka      000: "have you ever been to Paris"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'have-be', 'object': 'Paris'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be-to', 'object': 'paris'}

---------------------------------------------------------------

Mismatch in triple predicate: have-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'a-dog', 'type': ['animal']} == a-dog
Mismatch in triple predicate: have-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'a-dog', 'type': ['animal']} == a-dog
Mismatch in triple predicate: have-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'a-dog', 'type': ['animal']} == a-dog
Mismatch in triple predicate: have-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'a-dog', 'type': ['animal']} == a-dog

Utterance: 	lenka      000: "have you ever seen a dog"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'have-see', 'object': 'a-dog'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'see', 'object': 'a-dog'}

---------------------------------------------------------------

Mismatch in triple predicate: have-be != be-in
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york
Mismatch in triple predicate: have-be != be-in
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york
Mismatch in triple predicate: have-be != be-in
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york
Mismatch in triple predicate: have-be != be-in
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york

Utterance: 	lenka      000: "haven't you been in New York"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'have-be', 'object': 'New-York'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be-in', 'object': 'new-york'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: purple != leolani-favorite-color
Mismatch in triple object: your-favorite-color != purple
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: purple != leolani-favorite-color
Mismatch in triple object: your-favorite-color != purple
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: purple != leolani-favorite-color
Mismatch in triple object: your-favorite-color != purple

Utterance: 	lenka      000: "is purple your favorite color"
Predicted Triple:  	{'subject': 'purple', 'predicate': 'be', 'object': 'your-favorite-color'}
Expected triple:   	{'subject': 'leolani-favorite-color', 'predicate': 'be', 'object': 'purple'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: your-best-friend != leolani-best-friend
Match triple object: {'label': 'Selene', 'type': ['person']} == selene
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: your-best-friend != leolani-best-friend
Match triple object: {'label': 'Selene', 'type': ['person']} == selene

Utterance: 	lenka      000: "is your best friend Selene"
Predicted Triple:  	{'subject': 'your-best-friend', 'predicate': 'be', 'object': 'Selene'}
Expected triple:   	{'subject': 'leolani-best-friend', 'predicate': 'be', 'object': 'selene'}

---------------------------------------------------------------

Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: your-favorite != leolani-favorite-food
Mismatch in triple object: food-pizza != pizza
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: your-favorite != leolani-favorite-food
Mismatch in triple object: food-pizza != pizza
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple subject: your-favorite != leolani-favorite-food
Mismatch in triple object: food-pizza != pizza

Utterance: 	lenka      000: "is your favorite food pizza"
Predicted Triple:  	{'subject': 'your-favorite', 'predicate': 'be', 'object': 'food-pizza'}
Expected triple:   	{'subject': 'leolani-favorite-food', 'predicate': 'be', 'object': 'pizza'}

---------------------------------------------------------------

Mismatch in triple predicate: be-call != call
Mismatch in triple subject: your-friend != leolani-friend
Match triple object: {'label': 'susie', 'type': ['agent']} == susie

Utterance: 	lenka      000: "is your friend called susie"
Predicted Triple:  	{'subject': 'your-friend', 'predicate': 'be-call', 'object': 'susie'}
Expected triple:   	{'subject': 'leolani-friend', 'predicate': 'call', 'object': 'susie'}

---------------------------------------------------------------

Mismatch in triple predicate: must-go != go
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'home', 'type': ['location']} == home

Utterance: 	lenka      000: "must you go home"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'must-go', 'object': 'home'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go', 'object': 'home'}

---------------------------------------------------------------

Mismatch in triple predicate: will-come != come
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'tomorrow', 'type': ['time']} == tomorrow
Mismatch in triple predicate: will-come != come
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'tomorrow', 'type': ['time']} == tomorrow

Utterance: 	lenka      000: "will you come tomorrow"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'will-come', 'object': 'tomorrow'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'come', 'object': 'tomorrow'}

---------------------------------------------------------------

Mismatch in triple predicate: will-go != go-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Paris', 'type': ['location']} == paris
Mismatch in triple predicate: will-go != go-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Paris', 'type': ['location']} == paris

Utterance: 	lenka      000: "will you go to Paris"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'will-go', 'object': 'Paris'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go-to', 'object': 'paris'}



---------------------------------------------------------------
SUMMARY


RAN 48 UTTERANCES FROM FILE ./data/verb-questions.txt


UTTERANCE WITHOUT TRIPLES: 0

CORRECT TRIPLES: 8			INCORRECT TRIPLES: 40			RECALL: 16.67%

CORRECT SUBJECTS: 38			INCORRECT SUBJECTS: 10			RECALL: 79.17%

CORRECT PREDICATES: 18			INCORRECT PREDICATES: 30			RECALL: 37.50%

CORRECT OBJECTS: 27			INCORRECT OBJECTS: 21			RECALL: 56.25%

CORRECT PERSPECTIVES: 0			INCORRECT PERSPECTIVES: 0			RECALL: 0.00%

ISSUES (40 UTTERANCES): {
    "am I your best friend": {
        "triple": "am I your best friend: leolani-best-friend be lenka"
    }, 
    "are you a girl": {
        "triple": "are you a girl: leolani be girl"
    }, 
    "are your from the netherlands": {
        "triple": "are your from the netherlands: leolani be-from the-netherlands"
    }, 
    "are your parents from the netherlands": {
        "triple": "are your parents from the netherlands: leolani-parents be-from the-netherlands"
    }, 
    "can I call you": {
        "triple": "can I call you: lenka call leolani"
    }, 
    "can I make a cake": {
        "triple": "can I make a cake: lenka make cake"
    }, 
    "can a bird sing a song": {
        "triple": "can a bird sing a song: a-bird sing song"
    }, 
    "can my friend talk to you": {
        "triple": "can my friend talk to you: lenka-friend talk-to leolani"
    }, 
    "can you recommend a book about history": {
        "triple": "can you recommend a book about history: leolani recommend book-about-history"
    }, 
    "can you sing": {
        "triple": "can you sing: leolani sing "
    }, 
    "can you talk to me": {
        "triple": "can you talk to me: leolani talk-to lenka"
    }, 
    "can't you come to university": {
        "triple": "can't you come to university: leolani come-to university"
    }, 
    "could you hear me": {
        "triple": "could you hear me: leolani hear lenka"
    }, 
    "did lana read a book": {
        "triple": "did lana read a book: lana read book"
    }, 
    "did you ever go to Paris": {
        "triple": "did you ever go to Paris: leolani go-to paris"
    }, 
    "did you go to school yesterday": {
        "triple": "did you go to school yesterday: leolani go-to school-yesterday"
    }, 
    "did you meet a pretty girl": {
        "triple": "did you meet a pretty girl: leolani meet pretty-girl"
    }, 
    "did you meet john": {
        "triple": "did you meet john: leolani meet john"
    }, 
    "did you see a dog": {
        "triple": "did you see a dog: leolani see dog"
    }, 
    "did you sing a song about rain": {
        "triple": "did you sing a song about rain: leolani sing song-about-rain"
    }, 
    "did you talk with Selene": {
        "triple": "did you talk with Selene: leolani talk-with selene"
    }, 
    "didn't you see Selene": {
        "triple": "didn't you see Selene: leolani see selene"
    }, 
    "do you know a dangerous animal": {
        "triple": "do you know a dangerous animal: leolani know dangerous-animal"
    }, 
    "do you know what a dog is": {
        "triple": "do you know what a dog is: dog be "
    }, 
    "do you like living in amsterdam": {
        "triple": "do you like living in amsterdam: leolani like living-in-amsterdam"
    }, 
    "do you like talking to people": {
        "triple": "do you like talking to people: leolani like talking-to-people"
    }, 
    "do you like to live in new york": {
        "triple": "do you like to live in new york: leolani like to-live-in-new-york"
    }, 
    "do you see a dog": {
        "triple": "do you see a dog: leolani see dog"
    }, 
    "does john enjoy watching movies": {
        "triple": "does john enjoy watching movies: john enjoy watching-movies"
    }, 
    "does your sister know me": {
        "triple": "does your sister know me: leolani-sister know lenka"
    }, 
    "have you ever been to Paris": {
        "triple": "have you ever been to Paris: leolani be-to paris"
    }, 
    "have you ever seen a dog": {
        "triple": "have you ever seen a dog: leolani see a-dog"
    }, 
    "haven't you been in New York": {
        "triple": "haven't you been in New York: leolani be-in new-york"
    }, 
    "is purple your favorite color": {
        "triple": "is purple your favorite color: leolani-favorite-color be purple"
    }, 
    "is your best friend Selene": {
        "triple": "is your best friend Selene: leolani-best-friend be selene"
    }, 
    "is your favorite food pizza": {
        "triple": "is your favorite food pizza: leolani-favorite-food be pizza"
    }, 
    "is your friend called susie": {
        "triple": "is your friend called susie: leolani-friend call susie"
    }, 
    "must you go home": {
        "triple": "must you go home: leolani go home"
    }, 
    "will you come tomorrow": {
        "triple": "will you come tomorrow: leolani come tomorrow"
    }, 
    "will you go to Paris": {
        "triple": "will you go to Paris: leolani go-to paris"
    }
}

RUNNING 58 UTTERANCES FROM FILE ./data/wh-questions.txt


---------------------------------------------------------------

Match triple subject: {'label': 'cats', 'type': [], 'uri': None} == cats
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "what are cats"
Predicted Triple:  	{'subject': 'cats', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'cats', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: can-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: can-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "what can you see"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'can-see', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'see', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: be != birthday
Mismatch in triple subject: your-birthday != leolani
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: be != birthday
Mismatch in triple subject: your-birthday != leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "what day is your birthday"
Predicted Triple:  	{'subject': 'your-birthday', 'predicate': 'be', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'birthday', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "what do I like"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'like', 'object': ''}
Expected triple:   	{'subject': 'lenka', 'predicate': 'like', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'enjoy', 'type': ['emotion']} == enjoy
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'enjoy', 'type': ['emotion']} == enjoy
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'enjoy', 'type': ['emotion']} == enjoy
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'enjoy', 'type': ['emotion']} == enjoy
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "what do you enjoy"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'enjoy', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'enjoy', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'hate', 'type': ['emotion']} == hate
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'hate', 'type': ['emotion']} == hate
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'hate', 'type': ['emotion']} == hate
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'hate', 'type': ['emotion']} == hate
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "what do you hate"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'hate', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'hate', 'object': ''}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Match triple predicate: {'label': 'have', 'type': [], 'uri': None} == have
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Match triple predicate: {'label': 'have', 'type': [], 'uri': None} == have
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Match triple predicate: {'label': 'have', 'type': [], 'uri': None} == have
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Match triple predicate: {'label': 'have', 'type': [], 'uri': None} == have
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Match triple predicate: {'label': 'have', 'type': [], 'uri': None} == have
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Match triple predicate: {'label': 'have', 'type': [], 'uri': None} == have
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Match triple predicate: {'label': 'have', 'type': [], 'uri': None} == have
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Match triple predicate: {'label': 'have', 'type': [], 'uri': None} == have
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 

Utterance: 	lenka      000: "what do you have"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'have', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'have', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "what do you like"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'like', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': ''}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Mismatch in triple predicate: have != own
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Mismatch in triple predicate: have != own
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Mismatch in triple predicate: have != own
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Mismatch in triple predicate: have != own
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Mismatch in triple predicate: have != own
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Mismatch in triple predicate: have != own
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Mismatch in triple predicate: have != own
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 
Match triple subject: {'label': 'leolani', 'type': [], 'uri': None} == leolani
Mismatch in triple predicate: have != own
Match triple object: {'label': '', 'type': ['n2mu'], 'uri': None} == 

Utterance: 	lenka      000: "what do you own"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'have', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'own', 'object': ''}

---------------------------------------------------------------

Match triple subject: {'label': 'cat', 'type': [], 'uri': None} == cat
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Match triple subject: {'label': 'cat', 'type': [], 'uri': None} == cat
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Match triple subject: {'label': 'cat', 'type': [], 'uri': None} == cat
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Match triple subject: {'label': 'cat', 'type': [], 'uri': None} == cat
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Match triple subject: {'label': 'cat', 'type': [], 'uri': None} == cat
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Match triple subject: {'label': 'cat', 'type': [], 'uri': None} == cat
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "what is a cat"
Predicted Triple:  	{'subject': 'cat', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'cat', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: show != lenka
Mismatch in triple predicate:  != favorite-tv-show
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: show != lenka
Mismatch in triple predicate:  != favorite-tv-show
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: show != lenka
Mismatch in triple predicate:  != favorite-tv-show
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: show != lenka
Mismatch in triple predicate:  != favorite-tv-show
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: show != lenka
Mismatch in triple predicate:  != favorite-tv-show
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: show != lenka
Mismatch in triple predicate:  != favorite-tv-show
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "what is my favorite TV show"
Predicted Triple:  	{'subject': 'show', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'lenka', 'predicate': 'favorite-tv-show', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: food != lenka
Mismatch in triple predicate:  != favorite-food
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: food != lenka
Mismatch in triple predicate:  != favorite-food
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: food != lenka
Mismatch in triple predicate:  != favorite-food
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: food != lenka
Mismatch in triple predicate:  != favorite-food
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "what is my favorite food"
Predicted Triple:  	{'subject': 'food', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'lenka', 'predicate': 'favorite-food', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: fear != leolani
Mismatch in triple predicate:  != biggest-fear
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: fear != leolani
Mismatch in triple predicate:  != biggest-fear
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "what is your biggest fear"
Predicted Triple:  	{'subject': 'fear', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'biggest-fear', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: name != leolani-brother
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: name != leolani-brother
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: name != leolani-brother
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: name != leolani-brother
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "what is your brother's name"
Predicted Triple:  	{'subject': 'name', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'leolani-brother', 'predicate': 'name', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: name != lenka-brother
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: name != lenka-brother
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: name != lenka-brother
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: name != lenka-brother
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "what is my brother's name"
Predicted Triple:  	{'subject': 'name', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'lenka-brother', 'predicate': 'name', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: name != leolani-dog
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: name != leolani-dog
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: name != leolani-dog
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: name != leolani-dog
Mismatch in triple predicate:  != name
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "what is your dog's name"
Predicted Triple:  	{'subject': 'name', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'leolani-dog', 'predicate': 'name', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: color != leolani-favorite-color
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: color != leolani-favorite-color
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: color != leolani-favorite-color
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 
Mismatch in triple subject: color != leolani-favorite-color
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "what is your favorite color"
Predicted Triple:  	{'subject': 'color', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'leolani-favorite-color', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: be-come != come
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "when are you coming"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'be-come', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'come', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: be-go != go-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Mexico', 'type': ['location']} == mexico
Mismatch in triple predicate: be-go != go-to
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': 'Mexico', 'type': ['location']} == mexico

Utterance: 	lenka      000: "when are you going to Mexico"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'be-go', 'object': 'Mexico'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go-to', 'object': 'mexico'}

---------------------------------------------------------------

Mismatch in triple predicate: do-come != come
Match triple subject: {'label': 'Selene', 'type': ['person']} == selene
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: do-come != come
Match triple subject: {'label': 'Selene', 'type': ['person']} == selene
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: do-come != come
Match triple subject: {'label': 'Selene', 'type': ['person']} == selene
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: do-come != come
Match triple subject: {'label': 'Selene', 'type': ['person']} == selene
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "when did Selene come"
Predicted Triple:  	{'subject': 'Selene', 'predicate': 'do-come', 'object': ''}
Expected triple:   	{'subject': 'selene', 'predicate': 'come', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: do-go != go-to-school
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: school != 
Mismatch in triple predicate: do-go != go-to-school
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: school != 

Utterance: 	lenka      000: "when did you go to school"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do-go', 'object': 'school'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go-to-school', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: be != birthday
Mismatch in triple subject: your-birthday != leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "when is your birthday"
Predicted Triple:  	{'subject': 'your-birthday', 'predicate': 'be', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'birthday', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: be != birthday
Mismatch in triple subject: your-father-birthday != leolani-father
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: be != birthday
Mismatch in triple subject: your-father-birthday != leolani-father
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "when is your father's birthday"
Predicted Triple:  	{'subject': 'your-father-birthday', 'predicate': 'be', 'object': ''}
Expected triple:   	{'subject': 'leolani-father', 'predicate': 'birthday', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: going != leolani
Mismatch in triple predicate:  != go
Match triple object: {'label': '', 'type': ['n2mu:place'], 'uri': None} == 

Utterance: 	lenka      000: "where are you going"
Predicted Triple:  	{'subject': 'going', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: can-go != go
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "where can I go"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'can-go', 'object': ''}
Expected triple:   	{'subject': 'lenka', 'predicate': 'go', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: do-come-from != come-from
Match triple subject: {'label': 'Bram', 'type': ['person']} == bram
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: do-come-from != come-from
Match triple subject: {'label': 'Bram', 'type': ['person']} == bram
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: do-come-from != come-from
Match triple subject: {'label': 'Bram', 'type': ['person']} == bram
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: do-come-from != come-from
Match triple subject: {'label': 'Bram', 'type': ['person']} == bram
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "where did Bram come from"
Predicted Triple:  	{'subject': 'Bram', 'predicate': 'do-come-from', 'object': ''}
Expected triple:   	{'subject': 'bram', 'predicate': 'come-from', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: do-go != go
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple object: yesterday != 

Utterance: 	lenka      000: "where did you go yesterday"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'do-go', 'object': 'yesterday'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'go', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: friend != lenka-friend
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': ['n2mu:place'], 'uri': None} == 

Utterance: 	lenka      000: "where is my friend"
Predicted Triple:  	{'subject': 'friend', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'lenka-friend', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: from != selene
Mismatch in triple predicate:  != be-from
Match triple object: {'label': '', 'type': ['n2mu:place'], 'uri': None} == 

Utterance: 	lenka      000: "where is selene from"
Predicted Triple:  	{'subject': 'from', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'selene', 'predicate': 'be-from', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: friend != leolani-best-friend
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': ['n2mu:place'], 'uri': None} == 

Utterance: 	lenka      000: "where is your best friend"
Predicted Triple:  	{'subject': 'friend', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'leolani-best-friend', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: friend != leolani-friend
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': ['n2mu:place'], 'uri': None} == 

Utterance: 	lenka      000: "where is your friend"
Predicted Triple:  	{'subject': 'friend', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'leolani-friend', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: office != leolani-office
Mismatch in triple predicate:  != be
Match triple object: {'label': '', 'type': ['n2mu:place'], 'uri': None} == 

Utterance: 	lenka      000: "where is your office"
Predicted Triple:  	{'subject': 'office', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'leolani-office', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------


Utterance: 	lenka      000: "where was Selene born"
PARSE ERROR

---------------------------------------------------------------


Utterance: 	lenka      000: "where were you born"
PARSE ERROR

---------------------------------------------------------------

Mismatch in triple predicate: be != favorite-color
Mismatch in triple subject: your-favorite-color != leolani
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: be != favorite-color
Mismatch in triple subject: your-favorite-color != leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "which is your favorite color"
Predicted Triple:  	{'subject': 'your-favorite-color', 'predicate': 'be', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'favorite-color', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: colleagues != leolani
Mismatch in triple predicate:  != colleagues
Match triple object: {'label': '', 'type': [], 'uri': None} == 

Utterance: 	lenka      000: "who are your colleagues"
Predicted Triple:  	{'subject': 'colleagues', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'colleagues', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: can-sing != sing
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "who can sing"
Predicted Triple:  	{'subject': '', 'predicate': 'can-sing', 'object': ''}
Expected triple:   	{'subject': '', 'predicate': 'sing', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "who do I know"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'know', 'object': ''}
Expected triple:   	{'subject': 'lenka', 'predicate': 'know', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'know', 'type': ['cognition']} == know
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "who do you know"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'know', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'know', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "who do I like"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'like', 'object': ''}
Expected triple:   	{'subject': 'lenka', 'predicate': 'like', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Match triple predicate: {'label': 'like', 'type': ['emotion']} == like
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "who do you like"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'like', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: selene != like
Mismatch in triple subject:  != selene
Mismatch in triple object: like != 
Mismatch in triple predicate: selene != like
Mismatch in triple subject:  != selene
Mismatch in triple object: like != 
Mismatch in triple predicate: selene != like
Mismatch in triple subject:  != selene
Mismatch in triple object: like != 

Utterance: 	lenka      000: "who does selene like"
Predicted Triple:  	{'subject': '', 'predicate': 'selene', 'object': 'like'}
Expected triple:   	{'subject': 'selene', 'predicate': 'like', 'object': ''}

---------------------------------------------------------------

Match triple subject: {'label': 'selene', 'type': [], 'uri': None} == selene
Match triple predicate: {'label': 'know', 'type': [], 'uri': None} == know
Match triple object: {'label': '', 'type': ['person'], 'uri': None} == 
Match triple subject: {'label': 'selene', 'type': [], 'uri': None} == selene
Match triple predicate: {'label': 'know', 'type': [], 'uri': None} == know
Match triple object: {'label': '', 'type': ['person'], 'uri': None} == 
Match triple subject: {'label': 'selene', 'type': [], 'uri': None} == selene
Match triple predicate: {'label': 'know', 'type': [], 'uri': None} == know
Match triple object: {'label': '', 'type': ['person'], 'uri': None} == 
Match triple subject: {'label': 'selene', 'type': [], 'uri': None} == selene
Match triple predicate: {'label': 'know', 'type': [], 'uri': None} == know
Match triple object: {'label': '', 'type': ['person'], 'uri': None} == 

Utterance: 	lenka      000: "who does Selene know"
Predicted Triple:  	{'subject': 'selene', 'predicate': 'know', 'object': ''}
Expected triple:   	{'subject': 'selene', 'predicate': 'know', 'object': ''}

---------------------------------------------------------------

Mismatch in triple predicate: have != has
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: a-cat != cat
Mismatch in triple predicate: have != has
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: a-cat != cat
Mismatch in triple predicate: have != has
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: a-cat != cat

Utterance: 	lenka      000: "who has a cat"
Predicted Triple:  	{'subject': '', 'predicate': 'have', 'object': 'a-cat'}
Expected triple:   	{'subject': '', 'predicate': 'has', 'object': 'cat'}

---------------------------------------------------------------

Match triple predicate: {'label': 'hate', 'type': ['feeling']} == hate
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'cleaning', 'type': ['act', 'action']} == cleaning

Utterance: 	lenka      000: "who hates cleaning"
Predicted Triple:  	{'subject': '', 'predicate': 'hate', 'object': 'cleaning'}
Expected triple:   	{'subject': '', 'predicate': 'hate', 'object': 'cleaning'}

---------------------------------------------------------------

Mismatch in triple predicate: have-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: have-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: have-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 
Mismatch in triple predicate: have-see != see
Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple object: {'label': '', 'type': []} == 

Utterance: 	lenka      000: "who have you seen"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'have-see', 'object': ''}
Expected triple:   	{'subject': 'leolani', 'predicate': 'see', 'object': ''}

---------------------------------------------------------------

Mismatch in triple subject: mexico != 
Mismatch in triple predicate:  != be-from
Mismatch in triple object:  != mexico
Mismatch in triple subject: mexico != 
Mismatch in triple predicate:  != be-from
Mismatch in triple object:  != mexico

Utterance: 	lenka      000: "who is from Mexico"
Predicted Triple:  	{'subject': 'mexico', 'predicate': '', 'object': ''}
Expected triple:   	{'subject': '', 'predicate': 'be-from', 'object': 'mexico'}

---------------------------------------------------------------

Mismatch in triple subject: leolani != leolani-best-friend
Mismatch in triple predicate: know != be
Match triple object: {'label': '', 'type': ['person'], 'uri': None} == 

Utterance: 	lenka      000: "who is your best friend"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'know', 'object': ''}
Expected triple:   	{'subject': 'leolani-best-friend', 'predicate': 'be', 'object': ''}

---------------------------------------------------------------

Match triple predicate: {'label': 'like', 'type': []} == like
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'lenka', 'type': []} == lenka
Match triple predicate: {'label': 'like', 'type': []} == like
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'lenka', 'type': []} == lenka
Match triple predicate: {'label': 'like', 'type': []} == like
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'lenka', 'type': []} == lenka

Utterance: 	lenka      000: "who likes me"
Predicted Triple:  	{'subject': '', 'predicate': 'like', 'object': 'lenka'}
Expected triple:   	{'subject': '', 'predicate': 'like', 'object': 'lenka'}

---------------------------------------------------------------

Match triple predicate: {'label': 'like', 'type': []} == like
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'like', 'type': []} == like
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'leolani', 'type': ['agent']} == leolani
Match triple predicate: {'label': 'like', 'type': []} == like
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'leolani', 'type': ['agent']} == leolani

Utterance: 	lenka      000: "who likes you"
Predicted Triple:  	{'subject': '', 'predicate': 'like', 'object': 'leolani'}
Expected triple:   	{'subject': '', 'predicate': 'like', 'object': 'leolani'}

---------------------------------------------------------------

Match triple predicate: {'label': 'like', 'type': []} == like
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'singing', 'type': ['act', 'action']} == singing
Match triple predicate: {'label': 'like', 'type': []} == like
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'singing', 'type': ['act', 'action']} == singing
Match triple predicate: {'label': 'like', 'type': []} == like
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'singing', 'type': ['act', 'action']} == singing

Utterance: 	lenka      000: "who likes singing"
Predicted Triple:  	{'subject': '', 'predicate': 'like', 'object': 'singing'}
Expected triple:   	{'subject': '', 'predicate': 'like', 'object': 'singing'}

---------------------------------------------------------------

Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: people != talking-to-people
Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: people != talking-to-people
Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: people != talking-to-people
Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: people != talking-to-people
Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: people != talking-to-people
Mismatch in triple predicate: like-talk != like
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: people != talking-to-people

Utterance: 	lenka      000: "who likes talking to people"
Predicted Triple:  	{'subject': '', 'predicate': 'like-talk', 'object': 'people'}
Expected triple:   	{'subject': '', 'predicate': 'like', 'object': 'talking-to-people'}

---------------------------------------------------------------

Mismatch in triple predicate: like-watch != like
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: movies != watching-movies
Mismatch in triple predicate: like-watch != like
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: movies != watching-movies
Mismatch in triple predicate: like-watch != like
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: movies != watching-movies

Utterance: 	lenka      000: "who likes watching movies"
Predicted Triple:  	{'subject': '', 'predicate': 'like-watch', 'object': 'movies'}
Expected triple:   	{'subject': '', 'predicate': 'like', 'object': 'watching-movies'}

---------------------------------------------------------------

Match triple predicate: {'label': 'live-in', 'type': []} == live-in
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Match triple predicate: {'label': 'live-in', 'type': []} == live-in
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam

Utterance: 	lenka      000: "who lives in Amsterdam"
Predicted Triple:  	{'subject': '', 'predicate': 'live-in', 'object': 'Amsterdam'}
Expected triple:   	{'subject': '', 'predicate': 'live-in', 'object': 'amsterdam'}

---------------------------------------------------------------

Match triple predicate: {'label': 'live-in', 'type': []} == live-in
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york
Match triple predicate: {'label': 'live-in', 'type': []} == live-in
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york
Match triple predicate: {'label': 'live-in', 'type': []} == live-in
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york
Match triple predicate: {'label': 'live-in', 'type': []} == live-in
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'New-York', 'type': ['None', 'group']} == new-york

Utterance: 	lenka      000: "who lives in New York"
Predicted Triple:  	{'subject': '', 'predicate': 'live-in', 'object': 'New-York'}
Expected triple:   	{'subject': '', 'predicate': 'live-in', 'object': 'new-york'}

---------------------------------------------------------------

Match triple predicate: {'label': 'own', 'type': []} == own
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: a-cat != cat
Match triple predicate: {'label': 'own', 'type': []} == own
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: a-cat != cat
Match triple predicate: {'label': 'own', 'type': []} == own
Match triple subject: {'label': '', 'type': []} == 
Mismatch in triple object: a-cat != cat

Utterance: 	lenka      000: "who owns a cat"
Predicted Triple:  	{'subject': '', 'predicate': 'own', 'object': 'a-cat'}
Expected triple:   	{'subject': '', 'predicate': 'own', 'object': 'cat'}

---------------------------------------------------------------

Mismatch in triple predicate: will-come != come-to
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'school', 'type': ['group']} == school
Mismatch in triple predicate: will-come != come-to
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'school', 'type': ['group']} == school
Mismatch in triple predicate: will-come != come-to
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'school', 'type': ['group']} == school
Mismatch in triple predicate: will-come != come-to
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'school', 'type': ['group']} == school

Utterance: 	lenka      000: "who will come to school"
Predicted Triple:  	{'subject': '', 'predicate': 'will-come', 'object': 'school'}
Expected triple:   	{'subject': '', 'predicate': 'come-to', 'object': 'school'}

---------------------------------------------------------------

Match triple predicate: {'label': 'work-at', 'type': ['act', 'action']} == work-at
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple predicate: {'label': 'work-at', 'type': ['act', 'action']} == work-at
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple predicate: {'label': 'work-at', 'type': ['act', 'action']} == work-at
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple predicate: {'label': 'work-at', 'type': ['act', 'action']} == work-at
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple predicate: {'label': 'work-at', 'type': ['act', 'action']} == work-at
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple predicate: {'label': 'work-at', 'type': ['act', 'action']} == work-at
Match triple subject: {'label': '', 'type': []} == 
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university

Utterance: 	lenka      000: "who works at the university"
Predicted Triple:  	{'subject': '', 'predicate': 'work-at', 'object': 'the-university'}
Expected triple:   	{'subject': '', 'predicate': 'work-at', 'object': 'the-university'}



---------------------------------------------------------------
SUMMARY


RAN 58 UTTERANCES FROM FILE ./data/wh-questions.txt


UTTERANCE WITHOUT TRIPLES: 2

CORRECT TRIPLES: 17			INCORRECT TRIPLES: 41			RECALL: 29.31%

CORRECT SUBJECTS: 35			INCORRECT SUBJECTS: 23			RECALL: 60.34%

CORRECT PREDICATES: 18			INCORRECT PREDICATES: 40			RECALL: 31.03%

CORRECT OBJECTS: 48			INCORRECT OBJECTS: 10			RECALL: 82.76%

CORRECT PERSPECTIVES: 0			INCORRECT PERSPECTIVES: 0			RECALL: 0.00%

ISSUES (41 UTTERANCES): {
    "what are cats": {
        "triple": "what are cats: cats be "
    }, 
    "what can you see": {
        "triple": "what can you see: leolani see "
    }, 
    "what day is your birthday": {
        "triple": "what day is your birthday: leolani birthday "
    }, 
    "what do you own": {
        "triple": "what do you own: leolani own "
    }, 
    "what is a cat": {
        "triple": "what is a cat: cat be "
    }, 
    "what is my brother's name": {
        "triple": "what is my brother's name: lenka-brother name "
    }, 
    "what is my favorite TV show": {
        "triple": "what is my favorite TV show: lenka favorite-tv-show "
    }, 
    "what is my favorite food": {
        "triple": "what is my favorite food: lenka favorite-food "
    }, 
    "what is your biggest fear": {
        "triple": "what is your biggest fear: leolani biggest-fear "
    }, 
    "what is your brother's name": {
        "triple": "what is your brother's name: leolani-brother name "
    }, 
    "what is your dog's name": {
        "triple": "what is your dog's name: leolani-dog name "
    }, 
    "what is your favorite color": {
        "triple": "what is your favorite color: leolani-favorite-color be "
    }, 
    "when are you coming": {
        "triple": "when are you coming: leolani come "
    }, 
    "when are you going to Mexico": {
        "triple": "when are you going to Mexico: leolani go-to mexico"
    }, 
    "when did Selene come": {
        "triple": "when did Selene come: selene come "
    }, 
    "when did you go to school": {
        "triple": "when did you go to school: leolani go-to-school "
    }, 
    "when is your birthday": {
        "triple": "when is your birthday: leolani birthday "
    }, 
    "when is your father's birthday": {
        "triple": "when is your father's birthday: leolani-father birthday "
    }, 
    "where are you going": {
        "triple": "where are you going: leolani go "
    }, 
    "where can I go": {
        "triple": "where can I go: lenka go "
    }, 
    "where did Bram come from": {
        "triple": "where did Bram come from: bram come-from "
    }, 
    "where did you go yesterday": {
        "triple": "where did you go yesterday: leolani go "
    }, 
    "where is my friend": {
        "triple": "where is my friend: lenka-friend be "
    }, 
    "where is selene from": {
        "triple": "where is selene from: selene be-from "
    }, 
    "where is your best friend": {
        "triple": "where is your best friend: leolani-best-friend be "
    }, 
    "where is your friend": {
        "triple": "where is your friend: leolani-friend be "
    }, 
    "where is your office": {
        "triple": "where is your office: leolani-office be "
    }, 
    "where was Selene born": {
        "parsing": "NOT PARSED", 
        "triple": "where was Selene born: selene born "
    }, 
    "where were you born": {
        "parsing": "NOT PARSED", 
        "triple": "where were you born: leolani born "
    }, 
    "which is your favorite color": {
        "triple": "which is your favorite color: leolani favorite-color "
    }, 
    "who are your colleagues": {
        "triple": "who are your colleagues: leolani colleagues "
    }, 
    "who can sing": {
        "triple": "who can sing:  sing "
    }, 
    "who does selene like": {
        "triple": "who does selene like: selene like "
    }, 
    "who has a cat": {
        "triple": "who has a cat:  has cat"
    }, 
    "who have you seen": {
        "triple": "who have you seen: leolani see "
    }, 
    "who is from Mexico": {
        "triple": "who is from Mexico:  be-from mexico"
    }, 
    "who is your best friend": {
        "triple": "who is your best friend: leolani-best-friend be "
    }, 
    "who likes talking to people": {
        "triple": "who likes talking to people:  like talking-to-people"
    }, 
    "who likes watching movies": {
        "triple": "who likes watching movies:  like watching-movies"
    }, 
    "who owns a cat": {
        "triple": "who owns a cat:  own cat"
    }, 
    "who will come to school": {
        "triple": "who will come to school:  come-to school"
    }
}

RUNNING 28 UTTERANCES FROM FILE ./data/perspective.txt


---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Match triple object: {'label': 'a-book', 'type': ['communication']} == a-book

Utterance: 	lenka      000: "lana didn't read a book"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'do-read', 'object': 'a-book'}
Expected triple:   	{'subject': 'lana', 'predicate': 'read', 'object': 'a-book'}
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'love', 'type': ['emotion']} == love
Match triple object: {'label': 'sport', 'type': ['act', 'action']} == sport
Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'love', 'type': ['emotion']} == love
Match triple object: {'label': 'sport', 'type': ['act', 'action']} == sport

Utterance: 	lenka      000: "bram doesn't love sport"
Predicted Triple:  	{'subject': 'bram', 'predicate': 'love', 'object': 'sport'}
Expected triple:   	{'subject': 'bram', 'predicate': 'love', 'object': 'sport'}
Mismatch in perspective sentiment: 0.0 != 1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': 1.0}

---------------------------------------------------------------

Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 
Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 
Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 
Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 
Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 

Utterance: 	lenka      000: "birds can't talk"
Predicted Triple:  	{'subject': 'birds', 'predicate': 'can', 'object': 'talk'}
Expected triple:   	{'subject': 'birds', 'predicate': 'talk', 'object': ''}
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple predicate: {'label': 'hate', 'type': ['feeling']} == hate
Match triple object: {'label': 'fashion', 'type': ['attribute']} == fashion

Utterance: 	lenka      000: "john hates fashion"
Predicted Triple:  	{'subject': 'john', 'predicate': 'hate', 'object': 'fashion'}
Expected triple:   	{'subject': 'john', 'predicate': 'hate', 'object': 'fashion'}
Mismatch in perspective sentiment: 0.0 != -1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': 1.0, 'sentiment': -1.0}

---------------------------------------------------------------

Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple predicate: {'label': 'love', 'type': ['feeling']} == love
Match triple object: {'label': 'fashion', 'type': ['attribute']} == fashion

Utterance: 	lenka      000: "john loves fashion"
Predicted Triple:  	{'subject': 'john', 'predicate': 'love', 'object': 'fashion'}
Expected triple:   	{'subject': 'john', 'predicate': 'love', 'object': 'fashion'}
Mismatch in perspective sentiment: 0.0 != 1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': 1.0, 'sentiment': 1.0}

---------------------------------------------------------------

Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Match triple predicate: {'label': 'hate', 'type': ['emotion']} == hate
Match triple object: {'label': 'fashion', 'type': ['attribute']} == fashion

Utterance: 	lenka      000: "john doesn't hate fashion"
Predicted Triple:  	{'subject': 'john', 'predicate': 'hate', 'object': 'fashion'}
Expected triple:   	{'subject': 'john', 'predicate': 'hate', 'object': 'fashion'}
Mismatch in perspective sentiment: 0.0 != -1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': -1.0}

---------------------------------------------------------------

Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think-selene-work != work-in
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think-selene-work != work-in
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think-selene-work != work-in
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think-selene-work != work-in
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think-selene-work != work-in
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think-selene-work != work-in
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think-selene-work != work-in
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think-selene-work != work-in
Match triple object: {'label': 'Amsterdam', 'type': ['location']} == amsterdam

Utterance: 	lenka      000: "I think selene works in Amsterdam"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think-selene-work', 'object': 'Amsterdam'}
Expected triple:   	{'subject': 'selene', 'predicate': 'work-in', 'object': 'amsterdam'}
Mismatch in perspective certainty: 1.0 != 0.75
Expected perspective:   	{'certainty': 0.75, 'polarity': 1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school

Utterance: 	lenka      000: "I think john can't come to school"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think', 'object': 'john-can-not-come-to-school'}
Expected triple:   	{'subject': 'john', 'predicate': 'come-to', 'object': 'school'}
Mismatch in perspective certainty: 1.0 != 0.75
Mismatch in perspective polarity: 1.0 != -1.0
Expected perspective:   	{'certainty': 0.75, 'polarity': -1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Mismatch in triple subject: leolani != lenka
Mismatch in triple predicate: know != like
Mismatch in triple object: i-like-coffee != coffee
Mismatch in triple subject: leolani != lenka
Mismatch in triple predicate: know != like
Mismatch in triple object: i-like-coffee != coffee

Utterance: 	lenka      000: "you know I like coffee"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'know', 'object': 'I-like-coffee'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'like', 'object': 'coffee'}
Mismatch in perspective sentiment: 0.0 != 0.75
Expected perspective:   	{'certainty': 1.0, 'polarity': 1.0, 'sentiment': 0.75}

---------------------------------------------------------------

Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying

Utterance: 	lenka      000: "I think that birds like flying"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think', 'object': 'that-birds-like-flying'}
Expected triple:   	{'subject': 'birds', 'predicate': 'like', 'object': 'flying'}
Mismatch in perspective sentiment: 0.0 != 0.75
Mismatch in perspective certainty: 1.0 != 0.75
Expected perspective:   	{'certainty': 0.75, 'polarity': 1.0, 'sentiment': 0.75}

---------------------------------------------------------------

Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human

Utterance: 	lenka      000: "I know that you are not a human"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'know', 'object': 'that-you-are-not-a-human'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be', 'object': 'human'}
Mismatch in perspective polarity: 1.0 != -1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: know != be
Mismatch in triple object: that-you-are-not-a-human != human

Utterance: 	lenka      000: "I know that you aren't a human"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'know', 'object': 'that-you-are-not-a-human'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'be', 'object': 'human'}
Mismatch in perspective polarity: 1.0 != -1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != work-in
Mismatch in triple object: selene-works-in-amsterdam != amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != work-in
Mismatch in triple object: selene-works-in-amsterdam != amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != work-in
Mismatch in triple object: selene-works-in-amsterdam != amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != work-in
Mismatch in triple object: selene-works-in-amsterdam != amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != work-in
Mismatch in triple object: selene-works-in-amsterdam != amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != work-in
Mismatch in triple object: selene-works-in-amsterdam != amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != work-in
Mismatch in triple object: selene-works-in-amsterdam != amsterdam
Mismatch in triple subject: lenka != selene
Mismatch in triple predicate: think != work-in
Mismatch in triple object: selene-works-in-amsterdam != amsterdam

Utterance: 	lenka      000: "I think Selene works in Amsterdam"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think', 'object': 'Selene-works-in-Amsterdam'}
Expected triple:   	{'subject': 'selene', 'predicate': 'work-in', 'object': 'amsterdam'}
Mismatch in perspective certainty: 1.0 != 0.75
Expected perspective:   	{'certainty': 0.75, 'polarity': 1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school
Mismatch in triple subject: lenka != john
Mismatch in triple predicate: think != come-to
Mismatch in triple object: john-can-not-come-to-school != school

Utterance: 	lenka      000: "I think john can't come to school"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think', 'object': 'john-can-not-come-to-school'}
Expected triple:   	{'subject': 'john', 'predicate': 'come-to', 'object': 'school'}
Mismatch in perspective certainty: 1.0 != 0.75
Mismatch in perspective polarity: 1.0 != -1.0
Expected perspective:   	{'certainty': 0.75, 'polarity': -1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying
Mismatch in triple subject: lenka != birds
Mismatch in triple predicate: think != like
Mismatch in triple object: that-birds-like-flying != flying

Utterance: 	lenka      000: "I think that birds like flying"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think', 'object': 'that-birds-like-flying'}
Expected triple:   	{'subject': 'birds', 'predicate': 'like', 'object': 'flying'}
Mismatch in perspective sentiment: 0.0 != 0.75
Mismatch in perspective certainty: 1.0 != 0.75
Expected perspective:   	{'certainty': 0.75, 'polarity': 1.0, 'sentiment': 0.75}

---------------------------------------------------------------

Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 
Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 
Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 
Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 
Match triple subject: {'label': 'birds', 'type': ['animal']} == birds
Mismatch in triple predicate: can != talk
Mismatch in triple object: talk != 

Utterance: 	lenka      000: "birds can't talk"
Predicted Triple:  	{'subject': 'birds', 'predicate': 'can', 'object': 'talk'}
Expected triple:   	{'subject': 'birds', 'predicate': 'talk', 'object': ''}
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Match triple subject: {'label': 'John', 'type': ['artifact', 'object']} == john
Match triple predicate: {'label': 'hate', 'type': ['feeling']} == hate
Match triple object: {'label': 'fashion', 'type': ['attribute']} == fashion

Utterance: 	lenka      000: "John hates fashion"
Predicted Triple:  	{'subject': 'John', 'predicate': 'hate', 'object': 'fashion'}
Expected triple:   	{'subject': 'john', 'predicate': 'hate', 'object': 'fashion'}
Mismatch in perspective sentiment: 0.0 != -1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': 1.0, 'sentiment': -1.0}

---------------------------------------------------------------

Mismatch in triple subject: leolani != lenka
Mismatch in triple predicate: know != like
Mismatch in triple object: i-like-coffee != coffee
Mismatch in triple subject: leolani != lenka
Mismatch in triple predicate: know != like
Mismatch in triple object: i-like-coffee != coffee

Utterance: 	lenka      000: "you know I like coffee"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'know', 'object': 'I-like-coffee'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'like', 'object': 'coffee'}
Mismatch in perspective sentiment: 0.0 != 0.75
Expected perspective:   	{'certainty': 1.0, 'polarity': 1.0, 'sentiment': 0.75}

---------------------------------------------------------------

Mismatch in triple subject: selene != lenka
Mismatch in triple predicate: think != favorite-color
Mismatch in triple object: my-favorite-color-is-blue != blue
Mismatch in triple subject: selene != lenka
Mismatch in triple predicate: think != favorite-color
Mismatch in triple object: my-favorite-color-is-blue != blue

Utterance: 	lenka      000: "Selene thinks my favorite color is blue"
Predicted Triple:  	{'subject': 'Selene', 'predicate': 'think', 'object': 'my-favorite-color-is-blue'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'favorite-color', 'object': 'blue'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: think != like
Mismatch in triple object: you-do-not-like-pizza != pizza
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: think != like
Mismatch in triple object: you-do-not-like-pizza != pizza
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: think != like
Mismatch in triple object: you-do-not-like-pizza != pizza
Mismatch in triple subject: lenka != leolani
Mismatch in triple predicate: think != like
Mismatch in triple object: you-do-not-like-pizza != pizza

Utterance: 	lenka      000: "I think you don't like pizza"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'think', 'object': 'you-do-not-like-pizza'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'like', 'object': 'pizza'}

---------------------------------------------------------------

Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book
Match triple subject: {'label': 'lana', 'type': ['agent']} == lana
Mismatch in triple predicate: do-read != read
Mismatch in triple object: a-book != book

Utterance: 	lenka      000: "lana didn't read a book"
Predicted Triple:  	{'subject': 'lana', 'predicate': 'do-read', 'object': 'a-book'}
Expected triple:   	{'subject': 'lana', 'predicate': 'read', 'object': 'book'}
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': 0.0}

---------------------------------------------------------------

Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'love', 'type': ['emotion']} == love
Match triple object: {'label': 'sport', 'type': ['act', 'action']} == sport
Match triple subject: {'label': 'bram', 'type': ['agent']} == bram
Match triple predicate: {'label': 'love', 'type': ['emotion']} == love
Match triple object: {'label': 'sport', 'type': ['act', 'action']} == sport

Utterance: 	lenka      000: "bram doesn't love sport"
Predicted Triple:  	{'subject': 'bram', 'predicate': 'love', 'object': 'sport'}
Expected triple:   	{'subject': 'bram', 'predicate': 'love', 'object': 'sport'}
Mismatch in perspective sentiment: 0.0 != 1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': 1.0}

---------------------------------------------------------------

Match triple subject: {'label': 'John', 'type': ['artifact', 'object']} == john
Match triple predicate: {'label': 'love', 'type': ['feeling']} == love
Match triple object: {'label': 'fashion', 'type': ['attribute']} == fashion

Utterance: 	lenka      000: "John loves fashion"
Predicted Triple:  	{'subject': 'John', 'predicate': 'love', 'object': 'fashion'}
Expected triple:   	{'subject': 'john', 'predicate': 'love', 'object': 'fashion'}
Mismatch in perspective sentiment: 0.0 != 1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': 1.0, 'sentiment': 1.0}

---------------------------------------------------------------

Match triple subject: {'label': 'John', 'type': ['artifact', 'object']} == john
Match triple predicate: {'label': 'hate', 'type': ['emotion']} == hate
Match triple object: {'label': 'fashion', 'type': ['attribute']} == fashion

Utterance: 	lenka      000: "John doesn't hate fashion"
Predicted Triple:  	{'subject': 'John', 'predicate': 'hate', 'object': 'fashion'}
Expected triple:   	{'subject': 'john', 'predicate': 'hate', 'object': 'fashion'}
Mismatch in perspective sentiment: 0.0 != -1.0
Expected perspective:   	{'certainty': 1.0, 'polarity': -1.0, 'sentiment': -1.0}

---------------------------------------------------------------

Match triple subject: {'label': 'leolani', 'type': ['agent']} == leolani
Mismatch in triple predicate: must-bring != bring
Match triple object: {'label': 'three-books', 'type': ['communication']} == three-books

Utterance: 	lenka      000: "you must bring three books"
Predicted Triple:  	{'subject': 'leolani', 'predicate': 'must-bring', 'object': 'three-books'}
Expected triple:   	{'subject': 'leolani', 'predicate': 'bring', 'object': 'three-books'}

---------------------------------------------------------------

Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple predicate: might-like-read != like
Mismatch in triple object: books != reading-books
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple predicate: might-like-read != like
Mismatch in triple object: books != reading-books
Match triple subject: {'label': 'john', 'type': ['artifact', 'object']} == john
Mismatch in triple predicate: might-like-read != like
Mismatch in triple object: books != reading-books

Utterance: 	lenka      000: "john might like reading books"
Predicted Triple:  	{'subject': 'john', 'predicate': 'might-like-read', 'object': 'books'}
Expected triple:   	{'subject': 'john', 'predicate': 'like', 'object': 'reading-books'}

---------------------------------------------------------------

Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university
Match triple subject: {'label': 'selene', 'type': ['person']} == selene
Mismatch in triple predicate: should-come != come-to
Match triple object: {'label': 'the-university', 'type': ['group']} == the-university

Utterance: 	lenka      000: "selene should come to the university"
Predicted Triple:  	{'subject': 'selene', 'predicate': 'should-come', 'object': 'the-university'}
Expected triple:   	{'subject': 'selene', 'predicate': 'come-to', 'object': 'the-university'}

---------------------------------------------------------------

Match triple subject: {'label': 'Bob', 'type': ['quantity']} == bob
Mismatch in triple predicate: might-be != be-from
Match triple object: {'label': 'england', 'type': ['location']} == england
Match triple subject: {'label': 'Bob', 'type': ['quantity']} == bob
Mismatch in triple predicate: might-be != be-from
Match triple object: {'label': 'england', 'type': ['location']} == england
Match triple subject: {'label': 'Bob', 'type': ['quantity']} == bob
Mismatch in triple predicate: might-be != be-from
Match triple object: {'label': 'england', 'type': ['location']} == england
Match triple subject: {'label': 'Bob', 'type': ['quantity']} == bob
Mismatch in triple predicate: might-be != be-from
Match triple object: {'label': 'england', 'type': ['location']} == england
Match triple subject: {'label': 'Bob', 'type': ['quantity']} == bob
Mismatch in triple predicate: might-be != be-from
Match triple object: {'label': 'england', 'type': ['location']} == england

Utterance: 	lenka      000: "Bob might be from england"
Predicted Triple:  	{'subject': 'Bob', 'predicate': 'might-be', 'object': 'england'}
Expected triple:   	{'subject': 'bob', 'predicate': 'be-from', 'object': 'england'}



---------------------------------------------------------------
SUMMARY


RAN 28 UTTERANCES FROM FILE ./data/perspective.txt


UTTERANCE WITHOUT TRIPLES: 0

CORRECT TRIPLES: 8			INCORRECT TRIPLES: 20			RECALL: 28.57%

CORRECT SUBJECTS: 16			INCORRECT SUBJECTS: 12			RECALL: 57.14%

CORRECT PREDICATES: 8			INCORRECT PREDICATES: 20			RECALL: 28.57%

CORRECT OBJECTS: 13			INCORRECT OBJECTS: 15			RECALL: 46.43%

CORRECT PERSPECTIVES: 44			INCORRECT PERSPECTIVES: 22			RECALL: 157.14%

ISSUES (22 UTTERANCES): {
    "Bob might be from england": {
        "triple": "Bob might be from england: bob be-from england"
    }, 
    "I know that you are not a human": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": -1.0, 
            "sentiment": 0.0
        }, 
        "triple": "I know that you are not a human: leolani be human"
    }, 
    "I know that you aren't a human": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": -1.0, 
            "sentiment": 0.0
        }, 
        "triple": "I know that you aren't a human: leolani be human"
    }, 
    "I think Selene works in Amsterdam": {
        "perspective": {
            "certainty": 0.75, 
            "polarity": 1.0, 
            "sentiment": 0.0
        }, 
        "triple": "I think Selene works in Amsterdam: selene work-in amsterdam"
    }, 
    "I think john can't come to school": {
        "perspective": {
            "certainty": 0.75, 
            "polarity": -1.0, 
            "sentiment": 0.0
        }, 
        "triple": "I think john can't come to school: john come-to school"
    }, 
    "I think selene works in Amsterdam": {
        "perspective": {
            "certainty": 0.75, 
            "polarity": 1.0, 
            "sentiment": 0.0
        }, 
        "triple": "I think selene works in Amsterdam: selene work-in amsterdam"
    }, 
    "I think that birds like flying": {
        "perspective": {
            "certainty": 0.75, 
            "polarity": 1.0, 
            "sentiment": 0.75
        }, 
        "triple": "I think that birds like flying: birds like flying"
    }, 
    "I think you don't like pizza": {
        "triple": "I think you don't like pizza: leolani like pizza"
    }, 
    "John doesn't hate fashion": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": -1.0, 
            "sentiment": -1.0
        }
    }, 
    "John hates fashion": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": 1.0, 
            "sentiment": -1.0
        }
    }, 
    "John loves fashion": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": 1.0, 
            "sentiment": 1.0
        }
    }, 
    "Selene thinks my favorite color is blue": {
        "triple": "Selene thinks my favorite color is blue: lenka favorite-color blue"
    }, 
    "birds can't talk": {
        "triple": "birds can't talk: birds talk "
    }, 
    "bram doesn't love sport": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": -1.0, 
            "sentiment": 1.0
        }
    }, 
    "john doesn't hate fashion": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": -1.0, 
            "sentiment": -1.0
        }
    }, 
    "john hates fashion": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": 1.0, 
            "sentiment": -1.0
        }
    }, 
    "john loves fashion": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": 1.0, 
            "sentiment": 1.0
        }
    }, 
    "john might like reading books": {
        "triple": "john might like reading books: john like reading-books"
    }, 
    "lana didn't read a book": {
        "triple": "lana didn't read a book: lana read book"
    }, 
    "selene should come to the university": {
        "triple": "selene should come to the university: selene come-to the-university"
    }, 
    "you know I like coffee": {
        "perspective": {
            "certainty": 1.0, 
            "polarity": 1.0, 
            "sentiment": 0.75
        }, 
        "triple": "you know I like coffee: lenka like coffee"
    }, 
    "you must bring three books": {
        "triple": "you must bring three books: leolani bring three-books"
    }
}

RUNNING 34 UTTERANCES FROM FILE ./data/kinship-friends.txt


---------------------------------------------------------------

Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-called-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-called-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-called-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-called-carla != lenka

Utterance: 	lenka      000: "I have a sister called Carla"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'a-sister-called-Carla'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-sister-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-called-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-called-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-called-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-called-carl != lenka

Utterance: 	lenka      000: "I have a brother called Carl"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'a-brother-called-Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-brother-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: carl != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-called-carla != carl
Mismatch in triple subject: carl != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-called-carla != carl

Utterance: 	lenka      000: "Carl has a sister called Carla"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'have', 'object': 'a-sister-called-Carla'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-sister-of', 'object': 'carl'}

---------------------------------------------------------------

Mismatch in triple subject: carla != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-called-carl != carla
Mismatch in triple subject: carla != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-called-carl != carla

Utterance: 	lenka      000: "Carla has a brother called Carl"
Predicted Triple:  	{'subject': 'Carla', 'predicate': 'have', 'object': 'a-brother-called-Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-brother-of', 'object': 'carla'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka
Mismatch in triple subject: lenka != carla
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister-carla != lenka

Utterance: 	lenka      000: "I have a sister Carla"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'a-sister-Carla'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-sister-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother-carl != lenka

Utterance: 	lenka      000: "I have a brother Carl"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'a-brother-Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-brother-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-sister != lenka

Utterance: 	lenka      000: "I have a sister"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'a-sister'}
Expected triple:   	{'subject': 'someone', 'predicate': 'be-sister-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-brother != lenka

Utterance: 	lenka      000: "I have a brother"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'a-brother'}
Expected triple:   	{'subject': 'someone', 'predicate': 'be-brother-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-sister-of
Mismatch in triple object: a-little-sister != lenka

Utterance: 	lenka      000: "I have a little sister"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'a-little-sister'}
Expected triple:   	{'subject': 'someone', 'predicate': 'be-sister-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka
Mismatch in triple subject: lenka != someone
Mismatch in triple predicate: have != be-brother-of
Mismatch in triple object: a-little-brother != lenka

Utterance: 	lenka      000: "I have a little brother"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'a-little-brother'}
Expected triple:   	{'subject': 'someone', 'predicate': 'be-brother-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-brother != carl
Mismatch in triple predicate: be-call != be-brother-of
Mismatch in triple object: carl != lenka

Utterance: 	lenka      000: "My brother is called Carl"
Predicted Triple:  	{'subject': 'My-brother', 'predicate': 'be-call', 'object': 'Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-brother-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-brothers-name != carl
Mismatch in triple predicate: be != be-brother-of
Mismatch in triple object: carl != lenka

Utterance: 	lenka      000: "My brothers name is Carl"
Predicted Triple:  	{'subject': 'My-brothers-name', 'predicate': 'be', 'object': 'Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-brother-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-sister != carla
Mismatch in triple predicate: be-call != be-sister-of
Mismatch in triple object: carla != lenka
Mismatch in triple subject: my-sister != carla
Mismatch in triple predicate: be-call != be-sister-of
Mismatch in triple object: carla != lenka

Utterance: 	lenka      000: "My sister is called Carla"
Predicted Triple:  	{'subject': 'My-sister', 'predicate': 'be-call', 'object': 'Carla'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-sister-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-sisters-name != carla
Mismatch in triple predicate: be != be-sister-of
Mismatch in triple object: carla != lenka

Utterance: 	lenka      000: "My sisters name is Carla"
Predicted Triple:  	{'subject': 'My-sisters-name', 'predicate': 'be', 'object': 'Carla'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-sister-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-father != carl
Mismatch in triple predicate: be-call != be-father-of
Mismatch in triple object: carl != lenka

Utterance: 	lenka      000: "My father is called Carl"
Predicted Triple:  	{'subject': 'My-father', 'predicate': 'be-call', 'object': 'Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-father-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-mother != carla
Mismatch in triple predicate: be-call != be-mother-of
Mismatch in triple object: carla != lenka

Utterance: 	lenka      000: "My mother is called Carla"
Predicted Triple:  	{'subject': 'My-mother', 'predicate': 'be-call', 'object': 'Carla'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-mother-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-mothers-name != carla
Mismatch in triple predicate: be != be-mother-of
Mismatch in triple object: carla != lenka

Utterance: 	lenka      000: "My mothers name is Carla"
Predicted Triple:  	{'subject': 'My-mothers-name', 'predicate': 'be', 'object': 'Carla'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-mother-of', 'object': 'lenka'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be != be-brother-of
Mismatch in triple object: my-brother != lenka

Utterance: 	lenka      000: "Carl is my brother"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be', 'object': 'my-brother'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-brother-of', 'object': 'lenka'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carla', 'type': ['None']} == carla
Mismatch in triple predicate: be != be-sister-of
Mismatch in triple object: my-sister != lenka
Match triple subject: {'label': 'Carla', 'type': ['None']} == carla
Mismatch in triple predicate: be != be-sister-of
Mismatch in triple object: my-sister != lenka

Utterance: 	lenka      000: "Carla is my sister"
Predicted Triple:  	{'subject': 'Carla', 'predicate': 'be', 'object': 'my-sister'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-sister-of', 'object': 'lenka'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: work-as != be-father-of
Mismatch in triple object: father != lenka

Utterance: 	lenka      000: "Carl is my father"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'work-as', 'object': 'father'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-father-of', 'object': 'lenka'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carla', 'type': ['None']} == carla
Mismatch in triple predicate: work-as != be-mother-of
Mismatch in triple object: mother != lenka

Utterance: 	lenka      000: "Carla is my mother"
Predicted Triple:  	{'subject': 'Carla', 'predicate': 'work-as', 'object': 'mother'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-mother-of', 'object': 'lenka'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be != be-husband-of
Mismatch in triple object: my-husband != lenka

Utterance: 	lenka      000: "Carl is my husband"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be', 'object': 'my-husband'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-husband-of', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-husband != carl
Mismatch in triple predicate: be-call != be-husband-of
Mismatch in triple object: carl != lenka

Utterance: 	lenka      000: "My husband is called Carl"
Predicted Triple:  	{'subject': 'My-husband', 'predicate': 'be-call', 'object': 'Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-husband-of', 'object': 'lenka'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carla', 'type': ['None']} == carla
Mismatch in triple predicate: be-marry != be-spouse-of
Match triple object: {'label': 'Carl', 'type': ['None']} == carl
Match triple subject: {'label': 'Carla', 'type': ['None']} == carla
Mismatch in triple predicate: be-marry != be-spouse-of
Match triple object: {'label': 'Carl', 'type': ['None']} == carl

Utterance: 	lenka      000: "Carla is married to Carl"
Predicted Triple:  	{'subject': 'Carla', 'predicate': 'be-marry', 'object': 'Carl'}
Expected triple:   	{'subject': 'carla', 'predicate': 'be-spouse-of', 'object': 'carl'}

---------------------------------------------------------------

Mismatch in triple subject: carla-husband != carl
Mismatch in triple predicate: be != be-husband-of
Mismatch in triple object: carl != carla

Utterance: 	lenka      000: "Carla's husband is Carl"
Predicted Triple:  	{'subject': 'Carla-husband', 'predicate': 'be', 'object': 'Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-husband-of', 'object': 'carla'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carla', 'type': ['None']} == carla
Mismatch in triple predicate: have != spouse
Mismatch in triple object: a-husband-called-carl != carl
Match triple subject: {'label': 'Carla', 'type': ['None']} == carla
Mismatch in triple predicate: have != spouse
Mismatch in triple object: a-husband-called-carl != carl

Utterance: 	lenka      000: "Carla has a husband called Carl"
Predicted Triple:  	{'subject': 'Carla', 'predicate': 'have', 'object': 'a-husband-called-Carl'}
Expected triple:   	{'subject': 'carla', 'predicate': 'spouse', 'object': 'carl'}

---------------------------------------------------------------


Utterance: 	lenka      000: "Carla and Carl are married"
PARSE ERROR

---------------------------------------------------------------


Utterance: 	lenka      000: "Carla and Carl are together"
PARSE ERROR

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be != be-friends-with
Mismatch in triple object: your-friend != leolani

Utterance: 	lenka      000: "Carl is your friend"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be', 'object': 'your-friend'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-friends-with', 'object': 'leolani'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be != be-friends-with
Mismatch in triple object: my-friend != lenka

Utterance: 	lenka      000: "Carl is my friend"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be', 'object': 'my-friend'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-friends-with', 'object': 'lenka'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be != be-friends-with
Mismatch in triple object: my-friend != lenka

Utterance: 	lenka      000: "Carl is my friend"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be', 'object': 'my-friend'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-friends-with', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka
Mismatch in triple subject: lenka != carl
Mismatch in triple predicate: have != be-friends-with
Mismatch in triple object: a-friend-carl != lenka

Utterance: 	lenka      000: "I have a friend Carl"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have', 'object': 'a-friend-Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-friends-with', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-friend != carl
Mismatch in triple predicate: be-call != be-friends-with
Mismatch in triple object: carl != lenka

Utterance: 	lenka      000: "My friend is called Carl"
Predicted Triple:  	{'subject': 'My-friend', 'predicate': 'be-call', 'object': 'Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-friends-with', 'object': 'lenka'}

---------------------------------------------------------------

Mismatch in triple subject: my-friends-name != carl
Mismatch in triple predicate: be != be-friends-with
Mismatch in triple object: carl != lenka

Utterance: 	lenka      000: "My friends name is Carl"
Predicted Triple:  	{'subject': 'My-friends-name', 'predicate': 'be', 'object': 'Carl'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-friends-with', 'object': 'lenka'}



---------------------------------------------------------------
SUMMARY


RAN 34 UTTERANCES FROM FILE ./data/kinship-friends.txt


UTTERANCE WITHOUT TRIPLES: 2

CORRECT TRIPLES: 0			INCORRECT TRIPLES: 34			RECALL: 0.00%

CORRECT SUBJECTS: 10			INCORRECT SUBJECTS: 24			RECALL: 29.41%

CORRECT PREDICATES: 0			INCORRECT PREDICATES: 34			RECALL: 0.00%

CORRECT OBJECTS: 1			INCORRECT OBJECTS: 33			RECALL: 2.94%

CORRECT PERSPECTIVES: 0			INCORRECT PERSPECTIVES: 0			RECALL: 0.00%

ISSUES (33 UTTERANCES): {
    "Carl has a sister called Carla": {
        "triple": "Carl has a sister called Carla: carla be-sister-of carl"
    }, 
    "Carl is my brother": {
        "triple": "Carl is my brother: carl be-brother-of lenka"
    }, 
    "Carl is my father": {
        "triple": "Carl is my father: carl be-father-of lenka"
    }, 
    "Carl is my friend": {
        "triple": "Carl is my friend: carl be-friends-with lenka"
    }, 
    "Carl is my husband": {
        "triple": "Carl is my husband: carl be-husband-of lenka"
    }, 
    "Carl is your friend": {
        "triple": "Carl is your friend: carl be-friends-with leolani"
    }, 
    "Carla and Carl are married": {
        "parsing": "NOT PARSED", 
        "triple": "Carla and Carl are married: carla be-spouse-of carl"
    }, 
    "Carla and Carl are together": {
        "parsing": "NOT PARSED", 
        "triple": "Carla and Carl are together: carla be-spouse-of carl"
    }, 
    "Carla has a brother called Carl": {
        "triple": "Carla has a brother called Carl: carl be-brother-of carla"
    }, 
    "Carla has a husband called Carl": {
        "triple": "Carla has a husband called Carl: carla spouse carl"
    }, 
    "Carla is married to Carl": {
        "triple": "Carla is married to Carl: carla be-spouse-of carl"
    }, 
    "Carla is my mother": {
        "triple": "Carla is my mother: carla be-mother-of lenka"
    }, 
    "Carla is my sister": {
        "triple": "Carla is my sister: carla be-sister-of lenka"
    }, 
    "Carla's husband is Carl": {
        "triple": "Carla's husband is Carl: carl be-husband-of carla"
    }, 
    "I have a brother": {
        "triple": "I have a brother: someone be-brother-of lenka"
    }, 
    "I have a brother Carl": {
        "triple": "I have a brother Carl: carl be-brother-of lenka"
    }, 
    "I have a brother called Carl": {
        "triple": "I have a brother called Carl: carl be-brother-of lenka"
    }, 
    "I have a friend Carl": {
        "triple": "I have a friend Carl: carl be-friends-with lenka"
    }, 
    "I have a little brother": {
        "triple": "I have a little brother: someone be-brother-of lenka"
    }, 
    "I have a little sister": {
        "triple": "I have a little sister: someone be-sister-of lenka"
    }, 
    "I have a sister": {
        "triple": "I have a sister: someone be-sister-of lenka"
    }, 
    "I have a sister Carla": {
        "triple": "I have a sister Carla: carla be-sister-of lenka"
    }, 
    "I have a sister called Carla": {
        "triple": "I have a sister called Carla: carla be-sister-of lenka"
    }, 
    "My brother is called Carl": {
        "triple": "My brother is called Carl: carl be-brother-of lenka"
    }, 
    "My brothers name is Carl": {
        "triple": "My brothers name is Carl: carl be-brother-of lenka"
    }, 
    "My father is called Carl": {
        "triple": "My father is called Carl: carl be-father-of lenka"
    }, 
    "My friend is called Carl": {
        "triple": "My friend is called Carl: carl be-friends-with lenka"
    }, 
    "My friends name is Carl": {
        "triple": "My friends name is Carl: carl be-friends-with lenka"
    }, 
    "My husband is called Carl": {
        "triple": "My husband is called Carl: carl be-husband-of lenka"
    }, 
    "My mother is called Carla": {
        "triple": "My mother is called Carla: carla be-mother-of lenka"
    }, 
    "My mothers name is Carla": {
        "triple": "My mothers name is Carla: carla be-mother-of lenka"
    }, 
    "My sister is called Carla": {
        "triple": "My sister is called Carla: carla be-sister-of lenka"
    }, 
    "My sisters name is Carla": {
        "triple": "My sisters name is Carla: carla be-sister-of lenka"
    }
}

RUNNING 24 UTTERANCES FROM FILE ./data/activities.txt


---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: watch != do-activity
Mismatch in triple object: a-video != video
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: watch != do-activity
Mismatch in triple object: a-video != video
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: watch != do-activity
Mismatch in triple object: a-video != video
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: watch != do-activity
Mismatch in triple object: a-video != video
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: watch != do-activity
Mismatch in triple object: a-video != video
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: watch != do-activity
Mismatch in triple object: a-video != video

Utterance: 	lenka      000: "I watch a video"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'watch', 'object': 'a-video'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'video'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: play != do-activity
Match triple object: {'label': 'soccer', 'type': ['act', 'action']} == soccer

Utterance: 	lenka      000: "I play soccer"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'play', 'object': 'soccer'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'soccer'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: play != do-activity
Match triple object: {'label': 'cards', 'type': ['act', 'action']} == cards

Utterance: 	lenka      000: "I play cards"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'play', 'object': 'cards'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'cards'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: listen-to != do-activity
Match triple object: {'label': 'music', 'type': ['communication']} == music
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: listen-to != do-activity
Match triple object: {'label': 'music', 'type': ['communication']} == music

Utterance: 	lenka      000: "I listen to music"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'listen-to', 'object': 'music'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'music'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'dancing', 'type': ['motion']} == dancing
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'dancing', 'type': ['motion']} == dancing
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'dancing', 'type': ['motion']} == dancing
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'dancing', 'type': ['motion']} == dancing
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'dancing', 'type': ['motion']} == dancing
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'dancing', 'type': ['motion']} == dancing

Utterance: 	lenka      000: "I have been dancing"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have-be', 'object': 'dancing'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'dancing'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: an-exhibition != exhibition
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: an-exhibition != exhibition
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: an-exhibition != exhibition

Utterance: 	lenka      000: "I saw an exhibition"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'saw', 'object': 'an-exhibition'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'exhibition'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: a-show != show
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: a-show != show
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: a-show != show

Utterance: 	lenka      000: "I saw a show"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'saw', 'object': 'a-show'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'show'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert

Utterance: 	lenka      000: "I went to a concert"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'go-to', 'object': 'a-concert'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'concert'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie

Utterance: 	lenka      000: "I went to the movies"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'go-to', 'object': 'the-movies'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'movie'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: a-concert != concert

Utterance: 	lenka      000: "I have been to a concert"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have-be', 'object': 'a-concert'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'concert'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Mismatch in triple object: the-movies != movie

Utterance: 	lenka      000: "I have been to the movies"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have-be', 'object': 'the-movies'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'movie'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater

Utterance: 	lenka      000: "I was at the theater"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be-at', 'object': 'the-theater'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'theater'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum

Utterance: 	lenka      000: "I went to the museum"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'go-to', 'object': 'the-museum'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'museum'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: an-exhibition != exhibition
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: an-exhibition != exhibition
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: an-exhibition != exhibition

Utterance: 	lenka      000: "Carl saw an exhibition"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'saw', 'object': 'an-exhibition'}
Expected triple:   	{'subject': 'carl', 'predicate': 'do-activity', 'object': 'exhibition'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: a-show != show
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: a-show != show
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: saw != do-activity
Mismatch in triple object: a-show != show

Utterance: 	lenka      000: "Carl saw a show"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'saw', 'object': 'a-show'}
Expected triple:   	{'subject': 'carl', 'predicate': 'do-activity', 'object': 'show'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: a-concert != concert

Utterance: 	lenka      000: "Carl went to a concert"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'go-to', 'object': 'a-concert'}
Expected triple:   	{'subject': 'carl', 'predicate': 'do-activity', 'object': 'concert'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-movies != movie

Utterance: 	lenka      000: "Carl went to the movies"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'go-to', 'object': 'the-movies'}
Expected triple:   	{'subject': 'carl', 'predicate': 'do-activity', 'object': 'movie'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-at != do-activity
Mismatch in triple object: the-theater != theater

Utterance: 	lenka      000: "Carl was at the theater"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-at', 'object': 'the-theater'}
Expected triple:   	{'subject': 'carl', 'predicate': 'do-activity', 'object': 'theater'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: go-to != do-activity
Mismatch in triple object: the-museum != museum

Utterance: 	lenka      000: "Carl went to the museum"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'go-to', 'object': 'the-museum'}
Expected triple:   	{'subject': 'carl', 'predicate': 'do-activity', 'object': 'museum'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running

Utterance: 	lenka      000: "I have been running"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have-be', 'object': 'running'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'running'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'swimming', 'type': ['act', 'action']} == swimming
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'swimming', 'type': ['act', 'action']} == swimming

Utterance: 	lenka      000: "I have been swimming"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'have-be', 'object': 'swimming'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'swimming'}

---------------------------------------------------------------

Mismatch in triple subject: carl != cal
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running
Mismatch in triple subject: carl != cal
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running
Mismatch in triple subject: carl != cal
Mismatch in triple predicate: have-be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running

Utterance: 	lenka      000: "Carl has been running"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'have-be', 'object': 'running'}
Expected triple:   	{'subject': 'cal', 'predicate': 'do-activity', 'object': 'running'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be != do-activity
Match triple object: {'label': 'running', 'type': ['motion']} == running

Utterance: 	lenka      000: "I was running"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be', 'object': 'running'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'do-activity', 'object': 'running'}

---------------------------------------------------------------

Mismatch in triple subject: lenka != lenk
Mismatch in triple predicate: run != do-activity
Mismatch in triple object: a-marathon != marathon
Mismatch in triple subject: lenka != lenk
Mismatch in triple predicate: run != do-activity
Mismatch in triple object: a-marathon != marathon
Mismatch in triple subject: lenka != lenk
Mismatch in triple predicate: run != do-activity
Mismatch in triple object: a-marathon != marathon

Utterance: 	lenka      000: "I ran a marathon"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'run', 'object': 'a-marathon'}
Expected triple:   	{'subject': 'lenk', 'predicate': 'do-activity', 'object': 'marathon'}



---------------------------------------------------------------
SUMMARY


RAN 24 UTTERANCES FROM FILE ./data/activities.txt


UTTERANCE WITHOUT TRIPLES: 0

CORRECT TRIPLES: 0			INCORRECT TRIPLES: 24			RECALL: 0.00%

CORRECT SUBJECTS: 22			INCORRECT SUBJECTS: 2			RECALL: 91.67%

CORRECT PREDICATES: 0			INCORRECT PREDICATES: 24			RECALL: 0.00%

CORRECT OBJECTS: 8			INCORRECT OBJECTS: 16			RECALL: 33.33%

CORRECT PERSPECTIVES: 0			INCORRECT PERSPECTIVES: 0			RECALL: 0.00%

ISSUES (24 UTTERANCES): {
    "Carl has been running": {
        "triple": "Carl has been running: cal do-activity running"
    }, 
    "Carl saw a show": {
        "triple": "Carl saw a show: carl do-activity show"
    }, 
    "Carl saw an exhibition": {
        "triple": "Carl saw an exhibition: carl do-activity exhibition"
    }, 
    "Carl was at the theater": {
        "triple": "Carl was at the theater: carl do-activity theater"
    }, 
    "Carl went to a concert": {
        "triple": "Carl went to a concert: carl do-activity concert"
    }, 
    "Carl went to the movies": {
        "triple": "Carl went to the movies: carl do-activity movie"
    }, 
    "Carl went to the museum": {
        "triple": "Carl went to the museum: carl do-activity museum"
    }, 
    "I have been dancing": {
        "triple": "I have been dancing: lenka do-activity dancing"
    }, 
    "I have been running": {
        "triple": "I have been running: lenka do-activity running"
    }, 
    "I have been swimming": {
        "triple": "I have been swimming: lenka do-activity swimming"
    }, 
    "I have been to a concert": {
        "triple": "I have been to a concert: lenka do-activity concert"
    }, 
    "I have been to the movies": {
        "triple": "I have been to the movies: lenka do-activity movie"
    }, 
    "I listen to music": {
        "triple": "I listen to music: lenka do-activity music"
    }, 
    "I play cards": {
        "triple": "I play cards: lenka do-activity cards"
    }, 
    "I play soccer": {
        "triple": "I play soccer: lenka do-activity soccer"
    }, 
    "I ran a marathon": {
        "triple": "I ran a marathon: lenk do-activity marathon"
    }, 
    "I saw a show": {
        "triple": "I saw a show: lenka do-activity show"
    }, 
    "I saw an exhibition": {
        "triple": "I saw an exhibition: lenka do-activity exhibition"
    }, 
    "I was at the theater": {
        "triple": "I was at the theater: lenka do-activity theater"
    }, 
    "I was running": {
        "triple": "I was running: lenka do-activity running"
    }, 
    "I watch a video": {
        "triple": "I watch a video: lenka do-activity video"
    }, 
    "I went to a concert": {
        "triple": "I went to a concert: lenka do-activity concert"
    }, 
    "I went to the movies": {
        "triple": "I went to the movies: lenka do-activity movie"
    }, 
    "I went to the museum": {
        "triple": "I went to the museum: lenka do-activity museum"
    }
}

RUNNING 8 UTTERANCES FROM FILE ./data/feelings.txt


---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple object: {'label': 'sick', 'type': []} == sick
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple object: {'label': 'sick', 'type': []} == sick

Utterance: 	lenka      000: "I am sick"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be', 'object': 'sick'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be', 'object': 'sick'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple object: {'label': 'healthy', 'type': []} == healthy
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple object: {'label': 'healthy', 'type': []} == healthy

Utterance: 	lenka      000: "I am healthy"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be', 'object': 'healthy'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be', 'object': 'healthy'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'feel', 'type': ['emotion']} == feel
Match triple object: {'label': 'sick', 'type': []} == sick

Utterance: 	lenka      000: "I feel sick"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'feel', 'object': 'sick'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'feel', 'object': 'sick'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'feel', 'type': ['emotion']} == feel
Match triple object: {'label': 'great', 'type': []} == great

Utterance: 	lenka      000: "I feel great"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'feel', 'object': 'great'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'feel', 'object': 'great'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'feel', 'type': ['cognition']} == feel
Match triple object: {'label': 'sick', 'type': []} == sick

Utterance: 	lenka      000: "Carl feels sick"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'feel', 'object': 'sick'}
Expected triple:   	{'subject': 'carl', 'predicate': 'feel', 'object': 'sick'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'feel', 'type': ['cognition']} == feel
Match triple object: {'label': 'great', 'type': []} == great

Utterance: 	lenka      000: "Carl feels great"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'feel', 'object': 'great'}
Expected triple:   	{'subject': 'carl', 'predicate': 'feel', 'object': 'great'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple object: {'label': 'sick', 'type': []} == sick

Utterance: 	lenka      000: "Carl is sick"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be', 'object': 'sick'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be', 'object': 'sick'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Match triple object: {'label': 'healthy', 'type': []} == healthy

Utterance: 	lenka      000: "Carl is healthy"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be', 'object': 'healthy'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be', 'object': 'healthy'}



---------------------------------------------------------------
SUMMARY


RAN 8 UTTERANCES FROM FILE ./data/feelings.txt


UTTERANCE WITHOUT TRIPLES: 0

CORRECT TRIPLES: 8			INCORRECT TRIPLES: 0			RECALL: 100.00%

CORRECT SUBJECTS: 8			INCORRECT SUBJECTS: 0			RECALL: 100.00%

CORRECT PREDICATES: 8			INCORRECT PREDICATES: 0			RECALL: 100.00%

CORRECT OBJECTS: 8			INCORRECT OBJECTS: 0			RECALL: 100.00%

CORRECT PERSPECTIVES: 0			INCORRECT PERSPECTIVES: 0			RECALL: 0.00%

ISSUES (0 UTTERANCES): {}

RUNNING 13 UTTERANCES FROM FILE ./data/locations.txt


---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "Carl is next to the library"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-next-to', 'object': 'the-library'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-next-to', 'object': 'the-library'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "I am at the library"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be-at', 'object': 'the-library'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be-at', 'object': 'the-library'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "I am in the library"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be-inside', 'object': 'the-library'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be-in', 'object': 'the-library'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'my-home', 'type': ['location']} == my-home
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'my-home', 'type': ['location']} == my-home
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'my-home', 'type': ['location']} == my-home
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'my-home', 'type': ['location']} == my-home

Utterance: 	lenka      000: "I am in my home"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be-inside', 'object': 'my-home'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be-in', 'object': 'my-home'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "I am next to the library"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be-next-to', 'object': 'the-library'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be-next-to', 'object': 'the-library'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "Carl is in the library"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-inside', 'object': 'the-library'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-in', 'object': 'the-library'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'my-home', 'type': ['location']} == my-home
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'my-home', 'type': ['location']} == my-home

Utterance: 	lenka      000: "Carl is in my home"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-inside', 'object': 'my-home'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-in', 'object': 'my-home'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "Carl is at the library"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-at', 'object': 'the-library'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-at', 'object': 'the-library'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "Carl is next to the library"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-next-to', 'object': 'the-library'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-next-to', 'object': 'the-library'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "Carl was in the library"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-inside', 'object': 'the-library'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-in', 'object': 'the-library'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'my-home', 'type': ['location']} == my-home
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-inside != be-in
Match triple object: {'label': 'my-home', 'type': ['location']} == my-home

Utterance: 	lenka      000: "Carl was in my home"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-inside', 'object': 'my-home'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-in', 'object': 'my-home'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-at', 'type': ['stative']} == be-at
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "Carl was at the library"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-at', 'object': 'the-library'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-at', 'object': 'the-library'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Match triple predicate: {'label': 'be-next-to', 'type': ['stative']} == be-next-to
Match triple object: {'label': 'the-library', 'type': ['artifact', 'object']} == the-library

Utterance: 	lenka      000: "Carl was next to the library"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-next-to', 'object': 'the-library'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be-next-to', 'object': 'the-library'}



---------------------------------------------------------------
SUMMARY


RAN 13 UTTERANCES FROM FILE ./data/locations.txt


UTTERANCE WITHOUT TRIPLES: 0

CORRECT TRIPLES: 7			INCORRECT TRIPLES: 6			RECALL: 53.85%

CORRECT SUBJECTS: 13			INCORRECT SUBJECTS: 0			RECALL: 100.00%

CORRECT PREDICATES: 7			INCORRECT PREDICATES: 6			RECALL: 53.85%

CORRECT OBJECTS: 13			INCORRECT OBJECTS: 0			RECALL: 100.00%

CORRECT PERSPECTIVES: 0			INCORRECT PERSPECTIVES: 0			RECALL: 0.00%

ISSUES (6 UTTERANCES): {
    "Carl is in my home": {
        "triple": "Carl is in my home: carl be-in my-home"
    }, 
    "Carl is in the library": {
        "triple": "Carl is in the library: carl be-in the-library"
    }, 
    "Carl was in my home": {
        "triple": "Carl was in my home: carl be-in my-home"
    }, 
    "Carl was in the library": {
        "triple": "Carl was in the library: carl be-in the-library"
    }, 
    "I am in my home": {
        "triple": "I am in my home: lenka be-in my-home"
    }, 
    "I am in the library": {
        "triple": "I am in the library: lenka be-in the-library"
    }
}

RUNNING 7 UTTERANCES FROM FILE ./data/professions.txt


---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher

Utterance: 	lenka      000: "I am a teacher"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'work-as', 'object': 'teacher'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be', 'object': 'teacher'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher

Utterance: 	lenka      000: "Carl is a teacher"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'work-as', 'object': 'teacher'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be', 'object': 'teacher'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-police-officer != police-officer
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-police-officer != police-officer
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-police-officer != police-officer
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-police-officer != police-officer
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-police-officer != police-officer
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Match triple predicate: {'label': 'be', 'type': ['stative']} == be
Mismatch in triple object: a-police-officer != police-officer

Utterance: 	lenka      000: "I am a police-officer"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'be', 'object': 'a-police-officer'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be', 'object': 'police-officer'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'policeman', 'type': ['person']} == policeman
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'policeman', 'type': ['person']} == policeman
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'policeman', 'type': ['person']} == policeman

Utterance: 	lenka      000: "I was a policeman"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'work-as', 'object': 'policeman'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be', 'object': 'policeman'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'actor', 'type': ['person']} == actor
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'actor', 'type': ['person']} == actor
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'actor', 'type': ['person']} == actor

Utterance: 	lenka      000: "Carl was an actor"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'work-as', 'object': 'actor'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be', 'object': 'actor'}

---------------------------------------------------------------

Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'lenka', 'type': ['agent']} == lenka
Mismatch in triple predicate: work-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher

Utterance: 	lenka      000: "I work as a teacher"
Predicted Triple:  	{'subject': 'lenka', 'predicate': 'work-as', 'object': 'teacher'}
Expected triple:   	{'subject': 'lenka', 'predicate': 'be', 'object': 'teacher'}

---------------------------------------------------------------

Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher
Match triple subject: {'label': 'Carl', 'type': ['None']} == carl
Mismatch in triple predicate: be-as != be
Match triple object: {'label': 'teacher', 'type': ['person']} == teacher

Utterance: 	lenka      000: "Carl works as a teacher"
Predicted Triple:  	{'subject': 'Carl', 'predicate': 'be-as', 'object': 'teacher'}
Expected triple:   	{'subject': 'carl', 'predicate': 'be', 'object': 'teacher'}



---------------------------------------------------------------
SUMMARY


RAN 7 UTTERANCES FROM FILE ./data/professions.txt


UTTERANCE WITHOUT TRIPLES: 0

CORRECT TRIPLES: 0			INCORRECT TRIPLES: 7			RECALL: 0.00%

CORRECT SUBJECTS: 7			INCORRECT SUBJECTS: 0			RECALL: 100.00%

CORRECT PREDICATES: 1			INCORRECT PREDICATES: 6			RECALL: 14.29%

CORRECT OBJECTS: 6			INCORRECT OBJECTS: 1			RECALL: 85.71%

CORRECT PERSPECTIVES: 0			INCORRECT PERSPECTIVES: 0			RECALL: 0.00%

ISSUES (7 UTTERANCES): {
    "Carl is a teacher": {
        "triple": "Carl is a teacher: carl be teacher"
    }, 
    "Carl was an actor": {
        "triple": "Carl was an actor: carl be actor"
    }, 
    "Carl works as a teacher": {
        "triple": "Carl works as a teacher: carl be teacher"
    }, 
    "I am a police-officer": {
        "triple": "I am a police-officer: lenka be police-officer"
    }, 
    "I am a teacher": {
        "triple": "I am a teacher: lenka be teacher"
    }, 
    "I was a policeman": {
        "triple": "I was a policeman: lenka be policeman"
    }, 
    "I work as a teacher": {
        "triple": "I work as a teacher: lenka be teacher"
    }
}